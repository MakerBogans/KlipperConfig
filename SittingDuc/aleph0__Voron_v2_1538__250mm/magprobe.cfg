# Liberated from GhettoMat August 2021
# Original license unknown
# Uploaded by Sitting.duc
# my efforts all CC-BY-SA-3.0
#---+++----

# Update parameters under Magprobe_Variables
[gcode_macro Magprobe_Variables]

# True if using fixed dock (next to bed extrusion), False if using rear gantry extrusion
variable_fixed_dock:         False
# dock location, z only used if fixed dock is enabled
variable_endstop_location_x:  250
variable_endstop_location_y:  255
variable_dock_location_x:     161
variable_dock_location_y:     257
variable_dock_location_z:      20
# Movement speeds
variable_travel_speed:       6000
variable_dock_speed:         1000
variable_travel_speed_z:      900
variable_dock_speed_z:        100
# Set your printer build area
variable_build_area_x:        250
variable_build_area_y:        250
variable_consecutive_probing: False

# gcode here is just a placeholder to fill up the command
gcode:
    QUERY_PROBE


[gcode_macro G32]
# This macro bundles up homing and other klipper functions that uses probing and executes
# them consecutively without attaching/docking the probe everytime . Uncomment what bed
# levelling feature you need. Call it in your print start, end and cancel macros.
gcode:
    BED_MESH_CLEAR
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=True
    CONDITIONAL_HOME
    QUAD_GANTRY_LEVEL      ; tram the flying gantry
    G28 Z
    DOCK_PROBE              ; this is needed to dock the probe everything is done.
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=False

[gcode_macro DUC_MESH]
# This macro bundles up homing and other klipper functions that uses probing and executes
# them consecutively without attaching/docking the probe everytime . Uncomment what bed
# levelling feature you need. Call it in your print start, end and cancel macros.
gcode:
    BED_MESH_CLEAR
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=True
    CONDITIONAL_HOME
    QUAD_GANTRY_LEVEL      ; tram the flying gantry
    G28 Z
    BED_MESH_CALIBRATE     ; create new bed mesh
    DOCK_PROBE             ; this is needed to dock the probe everything is done.
    SET_GCODE_VARIABLE MACRO=Magprobe_Variables VARIABLE=consecutive_probing VALUE=False

[gcode_macro QUAD_GANTRY_LEVEL]
# Sweet Sweet Voron 2.4 QGL, now with magprobe
rename_existing: _QUAD_GANTRY_LEVEL
gcode:
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    CONDITIONAL_HOME
    ATTACH_PROBE
    _QUAD_GANTRY_LEVEL{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    {% if not probe_consec %}
        DOCK_PROBE
    {% endif %}


[gcode_macro BED_MESH_CALIBRATE]
# You too can print on a Taco, now with magprobe
rename_existing: _BED_MESH_CALIBRATE
gcode:
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    CONDITIONAL_HOME
    ATTACH_PROBE
    _BED_MESH_CALIBRATE{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    {% if not probe_consec %}
        DOCK_PROBE
    {% endif %}


####################################################################################################
####################################################################################################
### Nothing needs to be changed below unless you want to play with the code.
####################################################################################################
####################################################################################################



#######################
### Homing Override ###
#######################

[homing_override]
# this macro attempts to use the magprobe to find the bed
# If not configured correctly above, this code can bedcrash.
# In particular, check you have the right probe input pin!

axes: z
set_position_z: 0
gcode:
    #   Get Boundaries & check magprobe variables
    {% set FixedDock    = printer["gcode_macro Magprobe_Variables"].fixed_dock %}
    {% set build_x      = printer["gcode_macro Magprobe_Variables"].build_area_x|float %}
    {% set build_y      = printer["gcode_macro Magprobe_Variables"].build_area_y|float %}
    {% set probe_consec = printer["gcode_macro Magprobe_Variables"].consecutive_probing %}
    {% set endstop_x    = printer["gcode_macro Magprobe_Variables"].endstop_location_x|float %}
    {% set endstop_y    = printer["gcode_macro Magprobe_Variables"].endstop_location_y|float %}
    {% set TravelSpd    = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set TravelSpdZ   = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set probe_z      = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear      = 10|float %} # pick a value taller than your magprobe

    G90                                          ; absolute mode
    G0 Z{z_clear + probe_z} F{TravelSpdZ}        ; lift up to avoid bed

    {% if 'X' in params or (not 'Y' in params and not 'Z' in params) %}
        G28 X
    {% endif %}

    {% if 'Y' in params or (not 'X' in params and not 'Z' in params) %}
        G28 Y
    {% endif %}

    {% if 'Z' in params or (not 'X' in params and not 'Y' in params) %}
    # Check if it's fixed next to bed or rear of gantry
        {% if not FixedDock %}
            ATTACH_PROBE                                    ; attach magprobe
            G1 X{build_x / 2} Y{build_y / 2} F{TravelSpd}   ; move to middle, where the mesh sets Z=0
#            G1 X{build_x / 2} Y{3*build_y / 4} F{TravelSpd}   ; move to middle
            G28 Z                                           ; home Z
            G0 Z{z_clear + probe_z} F{TravelSpdZ}           ; move away from bed by probe z offset and z clear
            {% if not probe_consec %}
                DOCK_PROBE                                  ; dock magprobe
            {% endif %}
        {% else %}
            G0 Z5 F600
            G0 X{endstop_x} Y{endstop_y} F{TravelSpd}
            G28 Z
            G0 Z{z_clear} F{TravelSpdZ}
        {% endif %}
    {% endif %}



#####################################################################
### Attaching and docking probe, probe check status, misc. macros ###
#####################################################################

[gcode_macro ATTACH_PROBE]
# Get probe from dock onto toolhead
gcode:
  QUERY_PROBE
  PROBE_ATTACH_SEQUENCE


[gcode_macro PROBE_ATTACH_SEQUENCE]
# Internal sequence to get probe from dock onto toolhead
# not expected to be called by the user
gcode:
    # set some params referencing magprobe variables so that it's easier to type
    {% set FixedDock  = printer["gcode_macro Magprobe_Variables"].fixed_dock %}
    {% set DockX      = printer["gcode_macro Magprobe_Variables"].dock_location_x|float %}
    {% set DockY      = printer["gcode_macro Magprobe_Variables"].dock_location_y|float %}
    {% set DockZ      = printer["gcode_macro Magprobe_Variables"].dock_location_z|float %}
    {% set TravelSpd  = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set DockSpd    = printer["gcode_macro Magprobe_Variables"].dock_speed|float %}
    {% set TravelSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set DockSpdZ   = printer["gcode_macro Magprobe_Variables"].dock_speed_z|float %}
    {% set probe_z    = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear    = 10|float %} # pick a value taller than your magprobe

    # Absolute Positioning
    G90
    # attempt to move Z off the bed if we have already homed
    {% if 0 < printer.toolhead.position.z < z_clear %}
        {% if "z" in printer.toolhead.homed_axes %}
            { action_respond_info("Lift Z avoid Bed") } 
            G0 Z{z_clear + probe_z} F{TravelSpdZ}
        {% endif %}
    {% endif %}
    

    {% if printer.probe.last_query %}

        {% if not FixedDock %}
            # If the toolhead is behind the dock, move forwards in Y first
            {% if printer.toolhead.position.y >= (DockY - 20) %}                
                G1 Y{DockY - 20} F{TravelSpd}   
            {% endif %} 
        
            G1 X{DockX} F{TravelSpd}
            G1 Y{DockY-20}
            G1 Y{DockY} F{DockSpd}
            G1 Y{DockY - 20}
            CHECK_PROBE_ATTACHED

        {% else %}
            # If the toolhead is behind the dock, move forwards in Y first
            {% if printer.toolhead.position.y >= (DockY - 10) %}                
                G1 Y{DockY - 10} F{TravelSpd}   
            {% endif %} 
        
            G1 X{DockX} F{TravelSpd}
            G1 Y{DockY-25}
            G1 Z{DockZ + z_clear} F{TravelSpdZ}
            G1 Z{DockZ} F{DockSpdZ}
            G1 Y{DockY} F{DockSpd}
            G1 Y{DockY - 10}
            G1 Z{DockZ + probe_z} F{DockSpdZ}
            G1 Z{z_clear} F{TravelSpdZ}
            CHECK_PROBE_ATTACHED

        {% endif %}
    {% endif %}


[gcode_macro DOCK_PROBE]
# Take probe off toolhead and put on dock
gcode:
    {% set FixedDock  = printer["gcode_macro Magprobe_Variables"].fixed_dock %}
    {% set DockX      = printer["gcode_macro Magprobe_Variables"].dock_location_x|float %}
    {% set DockY      = printer["gcode_macro Magprobe_Variables"].dock_location_y|float %}
    {% set DockZ      = printer["gcode_macro Magprobe_Variables"].dock_location_z|float %}
    {% set max_y      = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set TravelSpd  = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    {% set DockSpd    = printer["gcode_macro Magprobe_Variables"].dock_speed|float %}
    {% set TravelSpdZ = printer["gcode_macro Magprobe_Variables"].travel_speed_z|float %}
    {% set DockSpdZ   = printer["gcode_macro Magprobe_Variables"].dock_speed_z|float %}
    {% set probe_z    = printer.configfile.config["probe"]["z_offset"]|float %}
    {% set z_clear    = 10|float %} # pick a value taller than your magprobe

    G90

    {% if not FixedDock %}
        # If the toolhead is behind the dock, move forwards in Y first
        {% if printer.toolhead.position.y >= (DockY - 20) %}                
            G1 Y{DockY - 20} F{TravelSpd}   
        {% endif %} 
    
        G1 X{DockX} F{TravelSpd}
        G1 Y{DockY - 20}
        G1 Y{DockY} F{DockSpd}
        G1 X{DockX - 40} F{DockSpd}
        G1 Y{max_y - 20}
        CHECK_PROBE_DETACHED

    {% else %}
        # If the toolhead is behind the dock, move forwards in Y first
        {% if printer.toolhead.position.y >= (DockY - 10) %}                
            G1 Y{DockY - 10} F{TravelSpd}   
        {% endif %} 
    
        G1 X{DockX} F{TravelSpd}
        G1 Y{DockY - 10}
        G1 Z{DockZ + 10} F{TravelSpdZ}
        G1 Z{DockZ} F{DockSpdZ}
        G1 Y{DockY} F{DockSpd}
        G1 X{DockX - 40}
        G1 Z{DockZ + z_clear} F{TravelSpdZ}
        CHECK_PROBE_DETACHED

    {% endif %}


[gcode_macro CHECK_PROBE_ATTACHED]
#sanity check if probe is attached, if not it will throw out an error.
gcode:
    QUERY_PROBE
    PROBE_ATTACH_SANITY_CHECK


[gcode_macro CHECK_PROBE_DETACHED]
#sanity check if probe is detached, if not it will throw out an error.
gcode:
    QUERY_PROBE
    PROBE_DETACH_SANITY_CHECK  


[gcode_macro PROBE_ATTACH_SANITY_CHECK]
gcode:
    {% if printer.probe.last_query %}
        {action_raise_error("Probe is missing/connection issue!")}
    {% endif %}


[gcode_macro PROBE_DETACH_SANITY_CHECK]
gcode:
    {% if not printer.probe.last_query %}
        {action_raise_error("Probe is attached! Beware of collisions!")}
    {% endif %}


[gcode_macro CONDITIONAL_HOME]
# If not yet homed, home all axes
gcode:
    {% if "xyz" not in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[gcode_macro PROBE_CALIBRATE]
# Interactive (sheet of paper) calibration of distance Nozzle to Bed
rename_existing: _PROBE_CALIBRATE
gcode:
    {% set build_x   = printer["gcode_macro Magprobe_Variables"].build_area_x|float %}
    {% set build_y   = printer["gcode_macro Magprobe_Variables"].build_area_y|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    CONDITIONAL_HOME
    ATTACH_PROBE
    G1 X{build_x / 2} Y{build_y / 2} F{TravelSpd}   ; move to middle
    { action_respond_info("Please manually detach probe before calibrating with TESTZ.
    Remember to put the probe back in the dock!") }
    _PROBE_CALIBRATE{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    DOCK_PROBE


[gcode_macro PROBE_ACCURACY]
# Test repeatability of magprobe
rename_existing: _PROBE_ACCURACY
gcode:
    {% set build_x   = printer["gcode_macro Magprobe_Variables"].build_area_x|float %}
    {% set build_y   = printer["gcode_macro Magprobe_Variables"].build_area_y|float %}
    {% set TravelSpd = printer["gcode_macro Magprobe_Variables"].travel_speed|float %}
    CONDITIONAL_HOME
    ATTACH_PROBE
    G1 X{build_x / 2} Y{build_y / 2} F{TravelSpd}   ; move to middle
    _PROBE_ACCURACY{% for p in params %} {'%s=%s' % (p, params[p])}{% endfor %}
    DOCK_PROBE
