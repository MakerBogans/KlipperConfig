[gcode_macro _global_variables]
variable_verbose:     True  # Enable verbose output
variable_probe_locked: False
gcode:

[delayed_gcode START_ME_UP]
# Run on startup
initial_duration: 1
gcode:
    # Aziz, LIGHT!
    SET_LIGHT

[gcode_macro CANCEL_PRINT]
description: Cancel the actual running print
rename_existing: CANCEL_PRINT_BASE
gcode:
  TURN_OFF_HEATERS

  PARK_IT

  CANCEL_PRINT_BASE
  
[gcode_macro PARK_IT]
gcode:
  {% set zH = 50 %}
  
  # Move the bed down
  {% if printer.toolhead.position.z > 50 %}
    {% set zH = printer.toolhead.position.z + 1 %}
  {% endif %}

  G90                           ; absolute positioning
  G0  X90 Y180 Z{zH} F3600      ; park nozzle at rear and drop the bed to at least 50

[gcode_macro SET_LIGHT]
gcode:
    {% set current_value = printer["output_pin enclosure_light"].value|float %}
    {% set wanted_value = params.VALUE|default(-1.0)|float %}

    # Value not provided, figure out what we should do
    {% if wanted_value == -1.0 %}
        {% if current_value == 0.0 %}
            {% set wanted_value = 0.5 %}
        {% else %}
            {% set wanted_value = 0.0 %}
        {% endif %}
    {% endif %}	

    {% set int_wanted = (wanted_value * 100) | int %}
    {% set int_current = (current_value * 100) | int %}

    {% if wanted_value > current_value %}
        {% for v in range(int_current, int_wanted + 1) %}
            SET_PIN PIN=enclosure_light VALUE={v/100|float}
        {% endfor %}
    {% else %}
        {% for v in range(int_current, int_wanted, -1) %}
            SET_PIN PIN=enclosure_light VALUE={v/100|float}
        {% endfor %}
        SET_PIN PIN=enclosure_light VALUE={wanted_value}
    {% endif %}   

[gcode_macro ACCEL_TEST]
description: Test given accel values acorss bed
gcode:
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set min_x = 0 %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set min_y = 0 %}

    # test config
    {% set config = {
      'accel'          : params.ACCEL|default(2500)|int,	# Test accel mm^2/sec
      'speed'          : params.SPEED|default(100)|int,		# Test speed mm/sec
      'wait'           : params.WAIT_MS|default(500)|int,	# Wait mSec between runs
      'x_padding'      : params.XPAD|default(5)|float,  	# padding around min/max x
      'y_padding'      : params.YPAD|default(5)|float,  	# padding around min/max y
    } %}

    SAVE_GCODE_STATE NAME=STATE_ACCEL_TEST

    M220 S100 							# Reset any scaling factors
    M221 S100 							# Reset any scaling factors

    # remove any exisiting clever stuff
    SET_VELOCITY_LIMIT VELOCITY={config.speed} ACCEL={config.accel} ACCEL_TO_DECEL={config.accel}
    SET_INPUT_SHAPER SHAPER_FREQ_X=0 SHAPER_FREQ_Y=0

    G1 F{config.speed * 60}
    M204 S{config.accel}

    M117 {config.speed}@{config.accel} X stepper
    G1 X{min_x+config.x_padding} Y{min_y+config.y_padding}
    G1 X{max_x-config.x_padding} Y{max_y-config.y_padding}
    G1 X{min_x+config.x_padding} Y{min_y+config.y_padding}
    G4 P{config.wait}
    M400

    M117 {config.speed}@{config.accel} Y stepper
    G1 X{min_x+config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G1 X{min_x+config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G4 P{config.wait}
    M400

    M117 {config.speed}@{config.accel} XY moves
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G1 X{min_x+config.x_padding} Y{min_y+config.y_padding}
    G1 X{min_x+config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{max_y-config.y_padding}
    G1 X{max_x-config.x_padding} Y{min_y+config.y_padding}
    G4 P{config.wait}
    M400

    M117 {config.speed}@{config.accel} Done

    RESTORE_GCODE_STATE NAME=STATE_ACCEL_TEST