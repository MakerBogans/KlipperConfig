[probe]
pin: PG6
x_offset: -25.0
y_offset: -1.88
z_offset: 7.530

speed: 3
lift_speed: 100
samples: 2
samples_result: median
sample_retract_dist: 2
samples_tolerance: 0.02
samples_tolerance_retries: 3

# This assumes the stock annex quickdraw probe dock position, ie mounted to left.

[gcode_macro _probe_setup]
variable_dock_x: -6   # Pickup position
variable_dock_y: 180

variable_dock_z: 15       # Safe position for the bed to be in while attaching/docking

variable_approach_x: 32   # Where to begin the pickup
variable_approach_y: 180

variable_detach_x: -6     # Where to go to swipe off the probe
variable_detach_y: 150

variable_post_x: 32       # Where to go after swiping/pickup
variable_post_y: 180

gcode:

[gcode_macro _probe_variables]
variable_verbose:      True  # Enable verbose output
variable_probe_locked: False
variable_probe_attached: False
gcode:


[gcode_macro _exit_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION  %}
    {% set move  = params.MOVE|default(0)  %}
    # mandatory to save the new safe position
    M400
    RESTORE_GCODE_STATE NAME={function} MOVE={move}


[gcode_macro _entry_point]
gcode:
    {% set function  = 'pre_' ~ params.FUNCTION  %}
    # mandatory to save the new safe position
    M400
    SAVE_GCODE_STATE NAME={function}
    # removes the Z offset for better bed based docking
    SET_GCODE_OFFSET Z=0
    # all the macros initially assume absolute positioning
    G90

[gcode_macro DOCK_PROBE]
gcode:
	check_probe wanted_state="CHECK"
	__DOCK_PROBE

# Return the probe to the dock
[gcode_macro __DOCK_PROBE]
gcode:
	{% if printer["gcode_macro _probe_variables"].probe_locked %}
		{ action_respond_info("Probe is locked. Ignoring DOCK_PROBE") }
	{% else %}
		{% if printer["gcode_macro _probe_variables"].probe_attached == True %}
			DROP_BED

	    	_entry_point function=dock_probe

			MOVE_APPROACH
			MOVE_DOCK
			MOVE_DETACH
			MOVE_POST

	    	_exit_point function=dock_probe

			# Stupid klipper polling crap where its still triggered by probing
			# and thinks its docked.

			check_probe wanted_state="DOCKED"
		{% endif %}	
	{% endif %}


[gcode_macro ATTACH_PROBE]
gcode:
	check_probe wanted_state="CHECK"
	__ATTACH_PROBE

# Pickup the probe from the dock
[gcode_macro __ATTACH_PROBE]
gcode:
	{% if printer["gcode_macro _probe_variables"].probe_attached == False %}
		DROP_BED

	    _entry_point function=attach_probe

		MOVE_APPROACH
		MOVE_DOCK
		MOVE_POST

	    _exit_point function=attach_probe

		check_probe wanted_state=ATTACHED
	{% endif %}


# Lock the probe to the toolhead. Calls to DOCK_PROBE will be ignored.
# If the probe is not attached when lock is called, a call to ATTACH_PROBE
# will still run

[gcode_macro LOCK_PROBE]
gcode:
  SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_locked VALUE={True}


# Unlock the probe from the toolhead. The next call to DOCK_PROBE will run.
[gcode_macro UNLOCK_PROBE]
gcode:
  SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_locked VALUE={False} 
  
[gcode_macro DROP_BED]
gcode:
	{% set z_height = printer.toolhead.position.z %}

	{% if z_height == 0 and not "z" in printer.toolhead.homed_axes %}
		{% set z_height = 0 %}
		SET_KINEMATIC_POSITION Z=0
	{% endif %}

	{% if z_height < printer["gcode_macro _probe_setup"].dock_z %}
		G0 Z{printer["gcode_macro _probe_setup"].dock_z} F1000
	{% endif %}

[gcode_macro MOVE_APPROACH]
gcode:
	G0 X{printer["gcode_macro _probe_setup"].approach_x} Y{printer["gcode_macro _probe_setup"].approach_y} F9000

[gcode_macro MOVE_DOCK]
gcode:
	G0 X{printer["gcode_macro _probe_setup"].dock_x} Y{printer["gcode_macro _probe_setup"].dock_y} F2500

[gcode_macro MOVE_POST]
gcode:
	G0 X{printer["gcode_macro _probe_setup"].post_x} Y{printer["gcode_macro _probe_setup"].post_y} F9000
	
[gcode_macro MOVE_DETACH]
gcode:
	G0 X{printer["gcode_macro _probe_setup"].detach_x} Y{printer["gcode_macro _probe_setup"].detach_y} F9000

[homing_override]
axes:                             xyz
gcode:
	{% if 'X' in params and 'Y' in params and 'Z' in params %}
		_Homing_Variables reset=1
	{% endif %}

	{% set X, Y, Z = False, False, False %}

	{% if not 'X' in params and not 'Y' in params and not 'Z' in params %}
       	{% set X, Y, Z = True, True, True %}
		# Drop the bed slightly for safety
		DROP_BED

	{% else %}
		{% if 'X' in params %}
			{% set X = True %}
		{% endif %}

		{% if 'Y' in params %}
			{% set Y = True %}
		{% endif %}

		{% if 'Z' in params %}
			{% set Z = True %}
		{% endif %}
	{% endif %}

    _entry_point function=homing_override

	{% if X %}
		G28 X0

		# Back the toohead off the endstop
		G91
		G0 X-5 F6000
	{% endif %}

	{% if Y %}
		G28 Y0

		# Back the toohead off the endstop
		G91
		G0 Y5 F6000
	{% endif %}

	{% if Z %}
		ATTACH_PROBE
		G0 X90 Y90 F6000
		G28 Z0
		DROP_BED
		DOCK_PROBE
	{% endif %}

    _exit_point function=homing_override


[bed_mesh]
[gcode_macro BED_MESH_CALIBRATE]
rename_existing:             _BED_MESH_CALIBRATE
gcode:
    ATTACH_PROBE
    _BED_MESH_CALIBRATE {% for p in params
           %}{'%s=%s ' % (p, params[p])}{%
          endfor %}
    DOCK_PROBE

[gcode_macro _state_variables]
variable_zta_required: True
gcode:


[gcode_macro COND_Z_TILT_ADJUST]
gcode:
	{% if printer["gcode_macro _state_variables"].zta_required == True %}
		Z_TILT_ADJUST
	{% endif %}

[gcode_macro Z_TILT_ADJUST]
rename_existing: BASE_Z_TILT_ADJUST
gcode:
	LOCK_PROBE

	{% if not "xyz" in printer.toolhead.homed_axes %}
    { action_respond_info("Homing before Z_TILT_ADJUST") }
		G28
	{% endif %}

	ATTACH_PROBE

  	BASE_Z_TILT_ADJUST

  	G0 X90 Y90 Z15 F6000
  	G28 Z0

  	UNLOCK_PROBE
  	DOCK_PROBE

	SET_GCODE_VARIABLE MACRO=_state_variables VARIABLE=zta_required VALUE={False}

# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: BASE_PROBE_CALIBRATE
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=PROBE_CALIBRATE
    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < printer["gcode_macro _probe_setup"].dock_z) %}
        G0 Z{printer["gcode_macro _probe_setup"].dock_z} F9000
    {% endif %}

    M400 # mandatory to save the new safe position
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED=6000

    BASE_PROBE_CALIBRATE {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
    #store current nozzle location
    SAVE_GCODE_STATE NAME=_original_nozzle_location

    Dock_Probe

    # Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED=6000
        _exit_point function=PROBE_CALIBRATE
# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:

    {% if not 'xyz' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X, Y and Z Axis First!") }
    {% endif %}

    _entry_point function=PROBE_ACCURACY

    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    {% if (printer.toolhead.position.z < printer["gcode_macro _probe_setup"].dock_z) %}
        G0 Z{printer["gcode_macro _probe_setup"].dock_z} F9000
    {% endif %}

    M400 # mandatory to save the new safe position

    SAVE_GCODE_STATE NAME=_original_nozzle_location

    ATTACH_PROBE

    # Restore nozzle location to probe the right place
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED=6000

    _PROBE_ACCURACY {% for p in params
            %}{'%s=%s ' % (p, params[p])}{%
           endfor %}
    #store current nozzle location
    SAVE_GCODE_STATE NAME=_original_nozzle_location
    DOCK_PROBE
	
	# Restore nozzle location again at the end
    RESTORE_GCODE_STATE NAME=_original_nozzle_location MOVE=1 MOVE_SPEED=6000
        _exit_point function=PROBE_ACCURACY


[gcode_macro check_probe]
gcode:
	QUERY_PROBE
	_check_probe WANTED_STATE={params.WANTED_STATE}

[gcode_macro _check_probe]
gcode:
	{% set wanted_state  = params.WANTED_STATE %}
	{% set probe_state   = printer.probe.last_query %}

	{% if probe_state %}
  		SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_attached VALUE={False}
	{% else %}
  		SET_GCODE_VARIABLE MACRO=_probe_variables VARIABLE=probe_attached VALUE={True}
	{% endif %}

	{% if (wanted_state == 'ATTACHED' and probe_state) %}
		{ action_raise_error("Probe not attached.") }
	{% endif %}
	
	{% if (wanted_state == 'DOCKED' and not probe_state) %}
		{ action_raise_error("Probe is attached") }
	{% endif %}

[gcode_macro _purge_setup]
# Purge location
variable_purge_x: -8
variable_purge_y: 110

# How many wipes (back and forward is 1)
# Assumes wiping in back and forward for stock K3 bucket.
variable_wiper_wipes: 3
variable_wipe_distance: 20
variable_wipe_direction: '+'   # + or - to determine which way to wipe first 

gcode:

[gcode_macro PURGE]
gcode:
	{% set purge_amount = params.AMOUNT|default(10)|float  %}
	{% set purge_speed = params.SPEED|default(90)|float  %}

	PURGE_MOVE

	# Purge ze filament
	G92 E0
	G1 E{purge_amount} F{purge_speed}
	G92 E0

	# Tiny retract to stop oooooozing
	G1 E-.2 F2700
	G92 E0

	M400
	SCRUB_NOZZLE

[gcode_macro PURGE_MOVE]
gcode:
    _entry_point function=PURGE_MOVE

	# Go to the purge bucket
	G0 X{printer["gcode_macro _purge_setup"].purge_x} Y{printer["gcode_macro _purge_setup"].purge_y} F5000

    _exit_point function=PURGE_MOVE

[gcode_macro SCRUB_NOZZLE]
gcode:
	{% set wipe_start_y = printer["gcode_macro _purge_setup"].purge_y %}

	{% if printer["gcode_macro _purge_setup"].wipe_direction == '+' %}
		{% set wipe_end_y = wipe_start_y + printer["gcode_macro _purge_setup"].wipe_distance  %}
	{% else %}
		{% set wipe_end_y = wipe_start_y - printer["gcode_macro _purge_setup"].wipe_distance  %}
	{% endif %}

    _entry_point function=SCRUB_NOZZLE

	DROP_BED
	PURGE_MOVE

	{% for i in range(0, printer["gcode_macro _purge_setup"].wiper_wipes) %}
		G0 Y{wipe_end_y} F4000
		G0 Y{wipe_start_y} F4000
	{% endfor %}

	_exit_point function=SCRUB_NOZZLE

[gcode_macro PRINT_IDLE_TIMEOUT]
gcode:
  # Runs when the printer goes idle, this will force the conditional z tilt adjust to run
  # during the next START_PRINT
  SET_GCODE_VARIABLE MACRO=_state_variables VARIABLE=zta_required VALUE={True}
