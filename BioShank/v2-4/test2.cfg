[gcode_macro test_material] ## i think i have to have this here because of they way klipper works...
gcode:
    {% set material = params.MATERIAL|default(PLA)|string %}

    {% if material == 'PLA' %}
        #SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
        #_serialMessages MSG='print_start changed zoffset: -0.025'
        _serialMessages MSG='PLA found'
    {% elif material == 'ABS'%}
        _serialMessages MSG='ABS found'
    {% else %}
        _serialMessages MSG='not found'
    {% endif %}



[gcode_macro check_pro]
#variable_shouldattach:               False # should probe be attached
variable_attach_attempts_loop: 10
variable_att_loop_number: 0
gcode:
	{% set _should_attach = params._SHOULD_ATTACH|default('False') %}
    {% set attach_attempts_counter = printer["gcode_macro _check_attached_vars"].attach_attempts|int %}


    #{% set should_attach = printer["gcode_macro check_if_attached"].shouldattach %}
    ## probe open  need to check before center. need to have two macros.
    ## check probe before z movement
    ##and check probe to save docking it twice and try pick it up again if it fails
    _CheckProbe action=query
    {% if printer.probe.last_query == False %} #if attached ;False = open
        _serialMessages MSG='true already attached'
        #ATTACH_PROBE_LOCK
    {% elif printer.probe.last_query == True %} #if not attached and it should be. pick it up.
        _serialMessages MSG='PICKING UP PROBE'
        _serialMessages MSG='true should be docked.'
        #DOCK_PROBE_UNLOCK #failsafe ?
                #failsafe ?
        #ATTACH_PROBE_LOCK
    {% endif %}
    {% if printer.probe.last_query == False %} #if attached ;false = open
        _serialMessages MSG='send help dock probe first'
        #DOCK_PROBE_UNLOCK
    {% elif printer.probe.last_query == True %} #probe not attached and i don't want it attached so do what??
        _serialMessages MSG='probe not attached doing nothing'
        #DOCK_PROBE_UNLOCK
        #DOCK_PROBE
    {% endif %}

