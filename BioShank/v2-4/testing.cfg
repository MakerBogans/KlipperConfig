


if want to attach probe = true
  for i in range(0, attachattempts)
    query probe
    if probe open
      if {i} == {i+1}#first attempt
        G0 move away a little
        attach_probe
      elif {i} == {i+1}#second attempt
        G0 move away a little
        attach_probe
      elif ect...

if want to attach probe = false
ect as above...





[gcode_macro _check_attached_vars]
variable_still_attached_err:    False
variable_attach_attempts:       0
variable_testing_attach:        0
variable_temp: 0
gcode:
    { action_respond_info("amount of attempts: %s" % attach_attempts ) }
    #{% set attempt_number = params._ATTEMPT_NUMBER|int %}
    #{% set attach_or_dock = params._ATTACH_OR_DOCK|default(0) %} ##dock = 0, attach = 1


    #{% if attach_or_dock == 0 %}
    #{% elif attach_or_dock == 1 %}
    #{% endif %}
	
	
	
[gcode_macro check_if_attached]
#variable_shouldattach:               False # should probe be attached
variable_attach_attempts_loop: 10
variable_fail_loop_number: 3
gcode:
	{% set _should_attach = params._SHOULD_ATTACH|default('False') %}
    {% set attach_attempts_counter = printer["gcode_macro _check_attached_vars"].attach_attempts|int %}



    #{% set should_attach = printer["gcode_macro check_if_attached"].shouldattach %}
    ## probe open  need to check before center. need to have two macros.
    ## check probe before z movement
    ##and check probe to save docking it twice and try pick it up again if it fails
    _CheckProbe action=query
    {% if ( 'True' in _should_attach ) %} #True
        {% if printer.probe.last_query == False %} #if attached ;True = triggered
            #{ action_respond_info("true already attached") }
            _serialMessages MSG='true already attached'
            #{ action_respond_info("PICKING UP PROBE") }
            ATTACH_PROBE_LOCK
        {% elif printer.probe.last_query == True %} #if not attached and it should be. pick it up.
            #{ action_respond_info("true should be docked.") }
            #{ action_respond_info("PICKING UP PROBE") }
            _serialMessages MSG='PICKING UP PROBE'
            _serialMessages MSG='true should be docked.'

            DOCK_PROBE_UNLOCK
            DOCK_PROBE
            ATTACH_PROBE_LOCK
        {% endif %}
    {% elif ( 'False' in _should_attach ) %} #False
        {% if printer.probe.last_query == False %} #if attached ;false = open
            #{ action_respond_info("false should be open/attached") }
            #{ action_respond_info("send help dock probe first") }
            
            ###################
            #_serialMessages MSG='send help dock probe first'
            #SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=still_attached_err VALUE={ False }
            #_check_attached_vars
            #{attach_attempts_counter} = {printer["gcode_macro _check_attached_vars"].attach_attempts +1 }
            #SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=attach_attempts VALUE={attach_attempts_counter+1}
            #_serialMessages MSG='docking attempt number: {attach_attempts_counter}'

            #DOCK_PROBE_UNLOCK
            #DOCK_PROBE
            #_check_attached_vars
            #_CheckProbe action=query
            ###################

            #{% for user in users %}
            #{%- if loop.index >= 10 %}{% break %}{% endif %}
            #{%- endfor %}

        
            #{% for i in range(attach_attempts_loop) %}
            {% for i in range(1, (attach_attempts_loop + 1)) %}

                _serialMessages MSG='loop number: {i}'
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=temp VALUE={i}
                {% if i == fail_loop_number %}
                    _serialMessages MSG='i want to exit'
                    #SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=temp VALUE={i}
                    Break
                    BREAK
                    #{% break %}
                    
                    break
                {% endif %}
                
            {% endfor %}

            _serialMessages MSG='exited on: {temp}'




            SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=testing_attach VALUE={attach_attempts_counter+1}
            _serialMessages MSG='Attempt number: {attach_attempts_counter}'
            {% if printer.probe.last_query == False and printer["gcode_macro _check_attached_vars"].attach_attempts == 0 %}
                _serialMessages MSG='attempt1'
                _serialMessages MSG='trying to dock again. attempt number: {attach_attempts_counter}'
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=still_attached_err VALUE={ False }
                #_check_attached_vars
                {attach_attempts_counter} = {printer["gcode_macro _check_attached_vars"].attach_attempts }
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=attach_attempts VALUE={attach_attempts_counter+1}
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=testing_attach VALUE={attach_attempts_counter+1}
                #_serialMessages MSG='docking attempt number: {attach_attempts_counter}'

                DOCK_PROBE_UNLOCK
                DOCK_PROBE
                #_check_attached_vars
            {% endif %}
            _CheckProbe action=query
            {% if printer.probe.last_query == False and printer["gcode_macro _check_attached_vars"].attach_attempts == 1 %}
            #{% if printer.probe.last_query == False and attach_attempts_counter == 1 %}
                _serialMessages MSG='attempt2'
                _serialMessages MSG='trying to dock again. attempt number: {attach_attempts_counter}'
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=still_attached_err VALUE={ False }
                #_check_attached_vars
                {attach_attempts_counter} = {printer["gcode_macro _check_attached_vars"].attach_attempts }
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=attach_attempts VALUE={attach_attempts_counter+1}
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=testing_attach VALUE={attach_attempts_counter+1}
                #_serialMessages MSG='docking attempt number: {attach_attempts_counter}'

                DOCK_PROBE_UNLOCK
                DOCK_PROBE
                #_check_attached_vars
                _CheckProbe action=query

            {% endif %}
            _CheckProbe action=query
            #{% if printer.probe.last_query == False and attach_attempts_counter == 2 %}
            {% if printer.probe.last_query == False and printer["gcode_macro _check_attached_vars"].attach_attempts == 2 %}
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=still_attached_err VALUE={ True }
                SET_GCODE_VARIABLE MACRO=_check_attached_vars VARIABLE=attach_attempts VALUE={0} #reset the counter to 0 not nessacary since the error below will make user run firmware restart.
            {% endif %}


            {% if printer["gcode_macro _check_attached_vars"].testing_attach == 0 %}
            _serialMessages MSG='testing0'
            {% endif %}
            {% if printer["gcode_macro _check_attached_vars"].testing_attach == 1 %}
            _serialMessages MSG='testing1'
            {% endif %}
            {% if printer["gcode_macro _check_attached_vars"].testing_attach == 2 %}
            _serialMessages MSG='testing2'
            {% endif %}
            {% if printer["gcode_macro _check_attached_vars"].testing_attach == 3 %}
            _serialMessages MSG='testing3'
            {% endif %}



            {% if printer["gcode_macro _check_attached_vars"].still_attached_err == True %}
                #{ action_emergency_stop("failed to dock probe!") }##failsafe to stop hitting bed.
                { action_raise_error("failed to dock probe!") }##failsafe to stop hitting bed.
                #{ action_raise_error("Must Home X and Y Axis First!") }
            {% endif %}
        
        {% elif printer.probe.last_query == True %} #probe not attached and i don't want it attached so do what??
            #{ action_respond_info("false already attached") }
            #{ action_respond_info("dropping probe off") }
            _serialMessages MSG='probe not attached doing nothing'
            #DOCK_PROBE_UNLOCK
            #DOCK_PROBE
        {% endif %}
    {% endif %}


        #{% if printer['gcode_macro _Probe_Variables'].probe_lock  == False %} #starts out as false
            #{ action_respond_info("send help probe is unlocked.") }
            #DOCK_PROBE
        #{% elif printer['gcode_macro _Probe_Variables'].probe_lock  == True %}
        #    { action_respond_info("send help dock probe first") }
        #    DOCK_PROBE
        #    DOCK_PROBE_UNLOCK
        #{% endif %}


	















[gcode_macro testing]
gcode:

		{% set MCU1 = printer.stepper_x %}
		#{% set MCU2 = stepper['GET_POSITION'].MCU["MCU"] %}
	    {% set th = printer.toolhead %}
    	#{% set xVar = [th.position.x*(-1)+1.02]%}

		#{ action_respond_info("loop: %s" % remaining)  }
   		{ action_respond_info("   ") }
		{ action_respond_info("MCU1: %s" % MCU1) }
		{ action_respond_info("   ") }

		#{ action_respond_info("   ") }
		#{ action_respond_info("MCU2: %s" % MCU2) }
		#{ action_respond_info("   ") }



[gcode_macro _HEAT_SOAK]
gcode:
    # Parameters
    {% set bedtemp = params.BED|int %}
    {% set minutespause = params.TIMER|int %}

    M190 S{bedtemp}
    {% for S in range(minutespause*30) %}
        G4 P2000
        M105
        _disp_timer timer={minutespause-loop.index/30}
    {% endfor %}

[gcode_macro _disp_timer]
gcode:
    {% set timeremaining = params.TIMER|float %}
    {% set minutes = (timeremaining//1)|int %}
    {% set seconds = ((timeremaining-minutes)*60)|int %}
    {% set msg = "Time remaining: {}-min {}-sec".format(minutes,seconds) %}
    { action_respond_info(msg) }


[gcode_macro _messagewaiting]
gcode:
    {% set message = params.MSG|int %}
    {% set loopnumber = params.LOOPNUMBER|int %}
	
    {% if message == 1 %}
        { action_respond_info("waiting") }
    {% elif message == 2 %}
        { action_respond_info("attach probe now") }
    {% elif message == 3 %}
        { action_respond_info("remove probe now") }
    {% elif message == 4 %}
        { action_respond_info("probe attached, homing axis") }
    {% elif message == 5 %}
        { action_respond_info("timer started") }
    {% elif message == 6 %}
        { action_respond_info("loop: %s" % loopnumber)  }
    {% endif %}


[gcode_macro wait_attach_remove]
variable_waitloops: 5 #seconds 
variable_waitduration: 3000
gcode:
    {% if not 'z' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G0 Y260 Z60 F2600 #move to position to attach probe #testing
    {% set _should_attach = params._SHOULD_ATTACH|default('False') %}
    #{waiting} = 5
    {% if ( 'True' in _should_attach ) %}
        _CheckProbe action=query
        {% if printer.probe.last_query == False %} #if attached ;True = triggered
            { action_respond_info("False: should say open, probe already attached.")  }
            _messagewaiting MSG=4 LOOPNUMBER=0
            G0 x150 Y150 f12000 #start printing
        {% elif printer.probe.last_query == True %} #if attached and i don't want it to be go into loop
            G0 Y260 Z60 F2600 #move to position to attach probe
            {% for waiting in range(1, (waitloops + 1)) %}
                #{ action_respond_info("loop: %s" % waiting)  }
                _messagewaiting MSG=6 LOOPNUMBER={waiting} #what loop number?
                {% if waiting > 1 %}
                    _messagewaiting MSG=5 LOOPNUMBER={waiting}
                    G4 P{waitduration} # 1000 =1 second 
                    _CheckProbe action=query
                    {% if printer.probe.last_query == True %} #if attached ;True = open
                        _messagewaiting MSG=2 LOOPNUMBER={waiting}
                    #{% else %}
                        #{% if waiting > 1 %}
                            #{waiting} = {waiting}-1
                            #SET_GCODE_VARIABLE MACRO=wait_attach_remove VARIABLE=waitloops VALUE={waitloops}+1
                            G4 P{waitduration} # 1000 =1 second
                            _messagewaiting MSG=1 LOOPNUMBER={waiting}
                        #{% endif %}
                    {% endif %}
                {% endif  %}
            {% endfor %}
        {% endif %}

#######################################################################################################
##why no while loops ? >:(
#######################################################################################################

    {% elif ( 'False' in _should_attach ) %} #False
        _CheckProbe action=query
        {% if printer.probe.last_query == True %} #if attached ;False = open so it's attached.
            { action_respond_info("True: should say triggerd, probe NOT attached.")  }
            _messagewaiting MSG=4 LOOPNUMBER=0
            G0 x150 Y150 f12000 #start printing
        {% elif printer.probe.last_query == False %} #it's attached and i don't want it to be so wait to remove it.
            G0 Y260 Z60 F2600 #move to position to remove probe
            {% for waiting in range(1, (waitloops + 1)) %}
                _messagewaiting MSG=6 LOOPNUMBER={waiting}
                {% if waiting > 1 %}
                    _messagewaiting MSG=5 LOOPNUMBER={waiting}
                    G4 P{waitduration} # 1000 =1 second 
                    _CheckProbe action=query
                    {% if printer.probe.last_query == False %}
                        _messagewaiting MSG=3 LOOPNUMBER={waiting}
                    #{% else %}
                        #{% if waiting > 1 %}
                            #{waiting} = {waiting}-1 # why this no work? unless i change the wait dur counter thing to higher number?
                            #SET_GCODE_VARIABLE MACRO=wait_attach_remove VARIABLE=waitloops VALUE={waitloops}+1
                            G4 P{waitduration} # 1000 =1 second 
                            _messagewaiting MSG=1 LOOPNUMBER={waiting}
                        #{% endif %}
                    {% endif %}
                {% endif  %}
            {% endfor %}
        {% endif %}
    {% endif %}
