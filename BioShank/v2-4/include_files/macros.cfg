[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QGL
gcode:
    {% set safe_z_h = printer['configfile'].config["quad_gantry_level"]["horizontal_move_z"]|int %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0.0
    SET_VELOCITY_LIMIT ACCEL=10000 ACCEL_TO_DECEL=10000 SQUARE_CORNER_VELOCITY=5.0
    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1.0
    M106 S0
    _check_if_homed
    _check_z_clearance #this is a double up...

    #{% if not 'z' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='homing Z'
    G28 Z
    #{% endif %}
    attach_probe
    G0 X50 Y25 Z{safe_z_h} F{speed}
    SET_VELOCITY_LIMIT ACCEL=20000 ACCEL_TO_DECEL=20000 SQUARE_CORNER_VELOCITY=5.0
    BASE_QGL
    G28 Z #probe
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY=5.0

[gcode_macro Center]
gcode:
    #{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    #{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    {% set safe_z_h = printer["gcode_macro _Tiny_User_Variables"].safe_z_height |float %}
    G90
    dock_probe #this does all -> #_check_if_homed #_check_z_clearance
    G90
    #G0 x150 Y150 Z2 f9000
    G0 x{x_center} Y{y_center} Z{safe_z_h} F{speed /2}


[gcode_macro tighten_belts]
gcode:
    # Airprint a box for belt adjustment. 
    # First belts should be loose, almost dropping off.
    {% set safe_z_h = printer["gcode_macro _Tiny_User_Variables"].safe_z_height |float %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %} 
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}

    # Home first then drop the bed 25 mm. You should do this manually, but uncomment to do automatically.
    #G28
    _check_if_homed
    G0 Z{safe_z_h} F{z_speed}

    # Run the below code and the belts will vibrate like a guitar string.
    # Tighten a little bit and repeat until the belts get to a point where they don’t vibrate.
    # At that point, you’re done.
    {% set iterations = 5|int %}
    {% for i in range(iterations) %}
        G0 X150 Y10 F{speed / 2}
        G0 X150 Y250 F{speed / 2}
        G0 X150 Y10 F{speed / 2}
        G0 X150 Y250 F{speed / 2}
        G0 X150 Y10 F{speed / 2}
        G0 X150 Y250 F{speed / 2}
        G0 X150 Y10 F{speed / 2}
        G0 X150 Y250 F{speed / 2}
        G0 X150 Y10 F{speed / 2}
        G0 X150 Y250 F{speed / 2}
        
        #G1 X10 Y10 F{speed / 2} # front left corner
        #G1 X10 Y250 F{speed / 2} # back left corner
        #G1 X250 Y250 F{speed / 2} # back right corner
        #G1 X250 Y10 F{speed / 2} # front right corner
        #G1 X10 Y10 F{speed / 2} # front left corner
        #G1 X250 Y250 F{speed / 2} # back right corner
        #G1 X10 Y250 F{speed / 2} # back left corner
        #G1 X250 Y10 F{speed / 2} # front right corner

    {% endfor %}
    G28 X Y

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    # Parameters
    G90 ; absolute position mode
    G92 E0 ; Reset Extruder
    #{% set bedtemp = params.BED|default(112)|int %}
    {% set bedtemp = params.BED|default(30)|int %}

    {% set hotendtemp = params.HOTEND|default(260)|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set skirts = params.SKIRTS|default(0)|int %}
    {% set brim = params.BRIM|default(0)|float %}
    {% set material = params.MATERIAL|default(ABS)|string %}
    {% set layerheight = params.LAYER_HEIGHT|default(0.1)|float %}
    {% set accel = params.MAIN_ACCEL|default(20000)|int %}
    {% set initial_hotend = (hotendtemp / 1.4)|round(0)|int %}

    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}


    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1.0
    SET_FAN_SPEED FAN=Skirt_Fan SPEED=1
    #SET_FAN_SPEED FAN=Skirt_Fan2 SPEED=0.80
    M83 ; use relative distances for extrusion
    #M104 S{hotendtemp / 2 }               ;start heating hotend WITHOUT WAIT
    _serialMessages MSG='heating hotend to: {initial_hotend}'
    #M104 S{hotendtemp / 1.4|round(0)|int}
    M104 S{initial_hotend}
    M140 S{bedtemp}         ;start WITHOUT WAIT
    G4 P2000                ;milliseconds
    _check_if_homed
    _check_z_clearance
    #MOVETOPURGE
    
    _check_bed_surface BED={bedtemp} MATERIAL={material} ACTIONS_BEFORE_NOZZLE=1
    scrubadubdub WANT_COLD='True'#change after bed
    #M104 S0                 ;turn off hotend
    #MOVETOBRUSH
    MOVETOPURGE
    _check_z_clearance
    M106 S0

    ##if surface temp is less than 100 
    _set_printing_values LAYER_HEIGHT={layerheight} MAIN_ACCEL={accel}
    _check_bed_surface BED={bedtemp} MATERIAL={material} ACTIONS_BEFORE_NOZZLE=0
    _serialMessages MSG='waiting for bed to normalize: {bedtemp}'
    scrubadubdub WANT_COLD='False'
    
    M106 S0
    M140 S{bedtemp}         #set bed temp back to normal
    M104 S0                 #turn off nozzle if noise is bad???
    #G4 P2000                #milliseconds
    G28 X Y
    QUAD_GANTRY_LEVEL
    #M109 S120               # set nozzle to pre determed temp and wait (turns out nozzle temp is affecting CALIBRATE_Z only a ~0.05 amount)
    #CALIBRATE_Z # i keep getting un repeatable results with this...
    M104 S0                 ;turn off nozzle if noise is bad???
    BED_MESH_CALIBRATE
    
    MOVETOPURGE
    #need to move to a point to stop oozing when heating up
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    _serialMessages MSG='final heating before starting print!'
    M104 S{hotendtemp / 2 }
    M190 S{bedtemp}         ;start heating bed and WAIT
    M109 S{hotendtemp}      ;start heating hotend and WAIT
    
    #MOVETOBRUSHRAISE

    {% if skirts > 1 %}
        _serialMessages MSG='skirt enabled, no purge'
    {% elif brim > 1 %}
        _serialMessages MSG='brim enabled, no purge'
    {% else %}
        _serialMessages MSG='no brim or skirt, PURGING'
        PURGELINE
    {% endif %}
    M83 ; use relative distances for extrusion
    G92 E0
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1.0
    {% if material == 'PLA' %}
        #SET_GCODE_OFFSET Z_ADJUST=-0.025 MOVE=1
        #_serialMessages MSG='print_start changed zoffset: -0.025'
        #SET_GCODE_OFFSET Z_ADJUST=-0.01 MOVE=1
    {% endif %} ##move this around so it will be after z calibration. while insice checkbedsurface
    {% if material == 'ABS' %} #not needed anymore autoz is on point.

        #SET_GCODE_OFFSET Z_ADJUST=+0.045 MOVE=1
        #_serialMessages MSG='print_start set zoffset to 0.045'
    {% endif %}
    _serialMessages MSG='LETS GO!!'

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-0.2 F1200                 ; retract filament 
    G91                            ; relative positioning
    G0 Z2 F3200                    ; go up a little
    
    G90                            ; Absolute positioning
    G0 X280 Y280 F24000            ; stringing bad move away from part
    G92 E0                         ; zero the extruder
    G1 E-3.5 F200                  ; retract filament 

    #M140 S85 ;lower bed temp 
    #scrubadubdub WANT_COLD=True change after bed
    #G28 Z
    
    ;M84 X Y E ;Disable all steppers but Z
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    _serialMessages MSG='Print Finished!!'
    ;M141 S0; Turn-off chamber

[gcode_macro _set_printing_values]
gcode:
    {% set layerheight = params.LAYER_HEIGHT|float %}
    {% set accel = params.MAIN_ACCEL|int %}

    SET_VELOCITY_LIMIT ACCEL={accel} ACCEL_TO_DECEL={accel} SQUARE_CORNER_VELOCITY=5.0

    #SET_GCODE_OFFSET Z=0.0 #reset the offset before starting each print.
    {% if layerheight == 0.1 %}
        {% if accel == 8000 %}
            _serialMessages MSG='setting values for: {layerheight} {accel}'
            SET_PRESSURE_ADVANCE ADVANCE=0.028 SMOOTH_TIME=0.035 ## accel 8000
            # SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1
        {% elif accel >= 20000 %}
            _serialMessages MSG='setting values for: LayerHeight{layerheight},Accel: {accel}'
            SET_PRESSURE_ADVANCE ADVANCE=0.038 SMOOTH_TIME=0.035 ## accel 20000
        {% endif %}
    {% elif layerheight == 0.2 %}
        {% if accel == 8000 %}
            _serialMessages MSG='setting values for: {layerheight} {accel}'
            SET_PRESSURE_ADVANCE ADVANCE=0.034 SMOOTH_TIME=0.035 ## accel 8000
            # SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1
        {% elif accel >= 20000 %}
            _serialMessages MSG='setting values for: LayerHeight{layerheight},Accel: {accel}'
            SET_PRESSURE_ADVANCE ADVANCE=0.038 SMOOTH_TIME=0.035 ## accel 20000
        {% endif %}
    {% else %}
        _serialMessages MSG='error setting PA or accel values'
    
    {% endif %}


[gcode_macro _check_bed_surface] ## takes ~5 minutes with bed at 115 for the surface to reach ~100c from ambient temp
gcode:                           ## ~46C chamber with bed at 115,surface ~102
                                 ## ~50c chamber is pushing it a bit between 46-48c ideal range.
                                 ## 112 bed takes ~24minutes to reach 50c chamber
                                 ## 115 bed takes ~8 minutes to reach 50c chamber
    {% set bedtemp = params.BED|default(112)|int %}
    {% set bedsurface = printer['temperature_sensor Bed_Surface'].temperature|float %}
    {% set material = params.MATERIAL|default(ABS)|string %}
    {% set actions_before_nozzle = params.ACTIONS_BEFORE_NOZZLE|default(1)|int %} #is the default thing messing with me?

    ##      with bed base at 112 surface seems to stabilize at around 103.8 - 104c        
    _serialMessages MSG='starting with bed is: {bedtemp} bed surface is: {bedsurface}'

    {% if printer['temperature_sensor Bed_Surface'].temperature >= 103.6 %} ##greater than
        #_serialMessages MSG='waiting for bed surface to cool down'
        {% if actions_before_nozzle == 1 %}#before nozzle scrub
            M140 S{bedtemp - 2 } #nowait
            _serialMessages MSG='before scrubadubdub bed is too hot cooling it down'
        {% elif actions_before_nozzle == 0 %}
            _serialMessages MSG='after scrubadubdub bed is too hot cooling it down'
            _serialMessages MSG='waiting for bed surface to reach: {bedtemp-9}'
            M140 S{bedtemp - 2 }
            TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-9} MAXIMUM={bedtemp-2} #-6
            M190 S{bedtemp}
        {% else %}
            _serialMessages MSG='error with cooling bed. bed is: {bedtemp} bed surface is: {bedsurface}'            
        {% endif %}
    {% elif printer['temperature_sensor Bed_Surface'].temperature <= 103.5 %} ##less than
        {% if actions_before_nozzle == 1 %} #before nozzle scrub
            {% if material == 'ABS' %}
                _serialMessages MSG='before clean preheating bed to: {bedtemp+3}'
                M140 S{bedtemp +3 } #nowait
            {% elif material == 'PLA' %}
                M140 S{bedtemp +10} #nowait
                _serialMessages MSG='before clean preheating bed to: {bedtemp+10}'
            {% else %}
                M140 S{bedtemp +2} #nowait
                _serialMessages MSG='error with beforenozzle marco1'
            {% endif %}
            ########################################################
        {% elif actions_before_nozzle == 0 %}
            {% if material == 'ABS' %}
                _serialMessages MSG='after clean preheating bed to: {bedtemp+3}'
                _serialMessages MSG='waiting for bed surface to heat up to: {bedtemp-9}'
                M190 S{bedtemp +3 }   ;start heating bed and WAIT bumping up by 2 might help surface get to temp a bit better.
                TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-9} MAXIMUM={bedtemp-2} #-6
            {% elif material == 'PLA' %}
                _serialMessages MSG='after clean preheating bed to: {bedtemp+10}'
                _serialMessages MSG='waiting for bed surface to heat up to: {bedtemp-1}'
                M190 S{bedtemp +10}
                TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-1} MAXIMUM={bedtemp+12}
            {% else %}
                _serialMessages MSG='error with beforenozzle marco2'
                M190 S{bedtemp +2}
            {% endif %}
        {% endif %}


     #{% elif printer['temperature_sensor Bed_Surface'].temperature <= 103.5 or printer['temperature_sensor Bed_Surface'].temperature >= 103.6 %} ##less than

    {% else %}
        _serialMessages MSG='error with heating bed. bed is: {bedtemp} bed surface is: {bedsurface}'            
    {% endif %}

[gcode_macro M48] #current pos
gcode:
    PROBE_ACCURACY

[gcode_macro purgeline]
gcode:
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %}
    _check_if_homed

    {% if printer.extruder.target <= printer.configfile.settings.extruder.min_extrude_temp %}
        _serialMessages MSG='too cold for purgeline heating up'
        M109 S{printer.configfile.settings.extruder.min_extrude_temp +60}
    {% endif %}

    dock_probe
    _check_z_clearance
    #movetobrush change after bed
    #G1 Z3.0 F2400 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X288 Y283 F15000 ; Move to start position before lowering Z
    G1 X288 Y283 Z0.30 F5000 ; Move to start position
    G1 X258 Y283 Z0.30 F1500 E6 ; Draw the first line
    G1 X258 Y284 Z0.30 F5000 ; Move to side a little
    G1 X288 Y284 Z0.30 F1500 E6 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z2 F{z_speed}
    G90                                     ; Absolute positioning
    G1 E-0.1 F600                         ; retract filament
    G92 E0 ; Reset Extruder
    G90
    #G0 x150 Y150 Z2 f9000
    #G0 x{x_center} Y{y_center} Z1 F{speed /2}
    MOVETOPURGE
    quickclean

[gcode_macro enableForceMoveZ]
gcode:
    SET_KINEMATIC_POSITION z=0

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	SET_PRESSURE_ADVANCE ADVANCE={pa}

[gcode_macro _raiseZcurrent]
gcode:
    {% set z_run_restore = printer.configfile.settings['tmc2209 stepper_z'].run_current|float %}
    {% set z_run_homing = 0.6 %}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run_homing}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run_homing}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run_homing}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run_homing}
    SET_TMC_CURRENT STEPPER=stepper_z STEPPER=stepper_z1 STEPPER=stepper_z2 STEPPER=stepper_z3 CURRENT={z_run_homing}

[gcode_macro _restoreZcurrent]
gcode:
    {% set z_run_restore = printer.configfile.settings['tmc2209 stepper_z'].run_current|float %}
    {% set z_run_homing = 0.6 %}
    SET_TMC_CURRENT STEPPER=stepper_z  CURRENT={z_run_restore}
    SET_TMC_CURRENT STEPPER=stepper_z1 CURRENT={z_run_restore}
    SET_TMC_CURRENT STEPPER=stepper_z2 CURRENT={z_run_restore}
    SET_TMC_CURRENT STEPPER=stepper_z3 CURRENT={z_run_restore}
    SET_TMC_CURRENT STEPPER=stepper_z STEPPER=stepper_z1 STEPPER=stepper_z2 STEPPER=stepper_z3 CURRENT={z_run_restore}

[gcode_macro _serialMessages]
gcode:
    {% set message = params.MSG|string %}
    { action_respond_info(message) }

##  examples below.
##
    #_serialMessages MSG='true already attached'
    #{% set settle_temp = 160|int %}
    #_serialMessages MSG='setting values for: {layerheight}'
    #_serialMessages MSG='starting with bed is: {bedtemp} bed surface is: {bedsurface}'


    #https://github.com/zellneralex/klipper_config/blob/master/homing.cfg