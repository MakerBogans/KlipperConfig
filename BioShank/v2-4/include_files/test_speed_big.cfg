# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example:  _TEST_SPEED_BIG SPEED=300 SQV=8.0 ACCEL=5000 ITERATIONS=10
#			_TEST_SPEED_BIG SPEED=400 SQV=10 ACCEL=40000 TESTSPEEDZ='False' ITERATIONS=10
#			_TEST_SPEED_BIG SPEED=450 SQV=8.0 ACCEL=10000 ITERATIONS=60
#			_TEST_SPEED_BIG SPEED=400 SQV=15.0 ACCEL=35000 ITERATIONS=5
#			_TEST_SPEED_BIG SPEED=200 SQV=20.0 ACCEL=35000 ITERATIONS=5


[gcode_macro _TEST_SPEED_BIG]
variable_testspeedz: 'False'
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|float %}
	{% set Z_speed  = ZSPEED|default(printer.configfile.settings.printer.max_z_velocity)|float %}

	{% set S_C_V  = params.SQV|default(printer.configfile.settings.printer.square_corner_velocity)|float %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	{% set testspeedz = params.TESTSPEEDZ|default('False') %}
	SET_GCODE_VARIABLE MACRO=TEST_SPEED VARIABLE=testspeedz VALUE={ testspeedz } ##this is getting passed as a string
	{% set zmovement = params.ZMOVEMENT|default(2)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
	{% set bound = params.BOUND|default(40)|int %} # prev 100
	{% set boundz = BOUNDZ|default(printer.toolhead.axis_maximum.z / 2 )|int %} ##should prob fix this so it is the center value
	# Size for small pattern box
	{% set smallpatternsize = SMALLPATTERNSIZE|default(10)|int %}
	
	# Large pattern
		# Max positions, inset by BOUND
		{% set x_min = printer.toolhead.axis_minimum.x + bound %}
		{% set x_max = printer.toolhead.axis_maximum.x - bound %}
		{% set y_min = printer.toolhead.axis_minimum.y + bound %}
		{% set y_max = printer.toolhead.axis_maximum.y - bound %} #z_min:-1.5 Z_max:220 boundz:110
		{% set z_min = printer.toolhead.axis_minimum.z|round(0)|int + boundz + ( printer.toolhead.axis_minimum.z|round(0)|int * printer.toolhead.axis_minimum.z|round(0)|int - zmovement )%} #110
		{% set z_max = printer.toolhead.axis_maximum.z - boundz + 2 %} #111

	
	# Small pattern at center
		# Find X/Y center point
		{% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
		{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
		
		# Set small pattern box around center point
		{% set x_center_min = x_center - (smallpatternsize/2) %}
		{% set x_center_max = x_center + (smallpatternsize/2) %}
		{% set y_center_min = y_center - (smallpatternsize/2) %}
		{% set y_center_max = y_center + (smallpatternsize/2) %}

	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	# Absolute positioning
	G90

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				#G28 Z ##every user should already have "g28 Z" included with their QGL rename so this is not needed? to save homing z twice but i guess safe guard is fine.
			{% endif %}
		{% endif %}
		G28 Z
		dock_probe
		{% if ( 'True' in testspeedz ) %} #True
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_minimum.z + 20} F{30 * 60}
		{% elif ( 'False' in testspeedz ) %} #False 
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		{% endif %}
		G4 P1000 
		# Set new limits
		SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel} SQUARE_CORNER_VELOCITY={S_C_V}
		# Output parameters to g-code terminal
		{ action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d, SCV %d" % (iterations, speed, accel, S_C_V)) }
		GET_POSITION

	# Go to starting position
	{% if ( 'True' in testspeedz ) %} #True
		G0 X{x_min} Y{y_min} Z{z_min + 20 - 100} F{Z_speed * 60} ##need to add printer z velocity?
	{% elif ( 'False' in testspeedz ) %} #False 
		G0 X{x_min} Y{y_min} Z{z_min + 20 - 100} F{Z_speed * 60}
	{% endif %}


	_serialMessages MSG='Xmin:{x_min} Xmax:{x_max} Ymin:{y_min} Ymax:{y_max} Zmin{z_min} Zmax:{z_max}'
	_serialMessages MSG='Xcentermin:{x_center_min} Xcentermax:{x_center_max} Ycentermin:{y_center_min} Ycentermax:{y_center_max}'
	#// xmin:100.0 xmax:190.0 ymin:100.0 ymax:206.0 zmin110 zmax:110.5
	SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel} SQUARE_CORNER_VELOCITY={S_C_V}
	
	{% if ( 'False' in testspeedz ) %} #False using this as default if it is not defined.
		#{ action_respond_info("NOT running Z movements.") }
		_serialMessages MSG='NOT running Z movements.'
		{% for i in range(iterations) %}
            # Large pattern
                # Diagonals
                G0 X{x_min} Y{y_min} F{speed*60}
                G0 X{x_max} Y{y_max} F{speed*60}
                G0 X{x_min} Y{y_min} F{speed*60}
                G0 X{x_max} Y{y_min} F{speed*60}
                G0 X{x_min} Y{y_max} F{speed*60}
                G0 X{x_max} Y{y_min} F{speed*60}
                
                # Box
                G0 X{x_min} Y{y_min} F{speed*60}
                G0 X{x_min} Y{y_max} F{speed*60}
                G0 X{x_max} Y{y_max} F{speed*60}
                G0 X{x_max} Y{y_min} F{speed*60}
            
            # Small pattern
                # Small diagonals 
                G0 X{x_center_min} Y{y_center_min} F{speed*60}
                G0 X{x_center_max} Y{y_center_max} F{speed*60}
                G0 X{x_center_min} Y{y_center_min} F{speed*60}
                G0 X{x_center_max} Y{y_center_min} F{speed*60}
                G0 X{x_center_min} Y{y_center_max} F{speed*60}
                G0 X{x_center_max} Y{y_center_min} F{speed*60}
                
                # Small box
                G0 X{x_center_min} Y{y_center_min} F{speed*60}
                G0 X{x_center_min} Y{y_center_max} F{speed*60}
                G0 X{x_center_max} Y{y_center_max} F{speed*60}
                G0 X{x_center_max} Y{y_center_min} F{speed*60}


        _remaining_loops REMAINING={i} ## run the loop remaining thing before or after movements?
        {% endfor %}
    {% endif %}



	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

	# Re-home and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		{% if ( 'True' in testspeedz ) %} #True if string
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_minimum.z|round(0)|int + 20} F{30 * 60}
		{% elif ( 'False' in testspeedz ) %} #False 
			G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} F{30 * 60}
		{% endif %}		
        G4 P1000 
		GET_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED

[gcode_macro _remaining_loops] #display loops remaining, nice if you run a big one :)
gcode:
	{% set remaining  = params.REMAINING|int %}
	{ action_respond_info("loop: %s" % remaining)  }

[gcode_macro _gp]
gcode:
	{% set x_or_y = params.X_OR_Y|int %}
    {% set x_MAX = params.X_MAX|int %}
	{% set y_MAX = params.Y_MAX|int %}
	{% set zzmd = params.ZZMD|int %}
	{% set speed = params.SPEED|int %}
	#{% set speed = printer["gcode_macro TEST_SPEED"].speed  %} ## why this no work???

	{% if x_or_y == 0 %}
		{% if (printer.toolhead.position.x +10 <= x_MAX ) %} ## or the bound distance?
			G91 # Relative
			G0 X{zzmd} F{speed * 60} ##move x across 10
			G90 # Absolute
		{% endif %}
	{% elif x_or_y == 1 %}
			{% if (printer.toolhead.position.y +10 <= y_MAX ) %}
			G91 # Relative
			G0 Y{zzmd} F{speed * 60} ##move y across 10
			G90 # Absolute
		{% endif %}
	{% endif %}