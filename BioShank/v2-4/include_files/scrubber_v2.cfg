[gcode_macro movetobrush]
gcode:
    #{% set P = printer["gcode_macro _Probe_Variables"].probe_attached %}
   {% set x_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_x|float + printer["gcode_macro scrubadubdub"].brush_end_x|float ) / 2 %}
   {% set y_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_y|float + printer["gcode_macro scrubadubdub"].brush_end_y|float ) / 2 %}
   HomeMe
       #{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
   G91
   G0 Z2 F{printer["gcode_macro scrubadubdub"].speed}  #need the thing to include other macro variables forgot what it is...
   G90
   G0 X{x_center_brush} Y{y_center_brush} F{printer["gcode_macro scrubadubdub"].speed} ## Move to brush center position
   G0 Z{printer["gcode_macro scrubadubdub"].brush_height_z} F{printer["gcode_macro scrubadubdub"].speed}      ## Move nozzle down into brush.

#[gcode_macro _get_temp] ##used to keep scrubbing till temp drops to x
#gcode:
   #if current temp greater than equal to cleaning temp
#   {% if printer.extruder.temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#   M105
#   {% endif %}


[gcode_macro _lowertemp]
gcode:
   {% set settle_temp = 160|int %}
   #if current temp greater than
   {% if printer.extruder.temperature > 50 %}
      #M109 S{printer.extruder.temperature - lowertemp}
      M106 S255 # this might help lower temp faster
      _serialMessages MSG='dropping hotend temp down to: {settle_temp}'
      
      M109 S{settle_temp}
      M106 S0 # turn off part fan after 
   {% endif %}


[gcode_macro scrubadubdub]
variable_wipe_qty:           10
variable_speed:            18000
variable_zspeed:           10000

##                               brush positions are based on nozzle pos
##                               move nozzle to where you want start/end movements to be
variable_brush_start_x:     230
variable_brush_end_x:       270
variable_brush_start_y:     295
variable_brush_end_y:       303
variable_brush_height_z:    1.10 #seems to be perfect
variable_brush_lower_z:     0.25 #prev 1.20
variable_cleaning_temp:     200  # oozzeee?
variable_wait_time:         4000 #milliseconds
variable_want_cold:         False

gcode:
   {% set x_center = (brush_start_x|float + brush_end_x|float ) / 2 %}
   {% set y_center = (brush_start_y|float + brush_end_y|float ) / 2 %}
   {% set lower_z_by = 8.75 %} #printer['configfile'].config["stepper_z"]["position_min"]|float %}

	{% set want_cold = params.WANT_COLD|default('False') %}
	SET_GCODE_VARIABLE MACRO=scrubadubdub VARIABLE=want_cold VALUE={ want_cold }
   HomeMe
################################################################################################################################

   #if current temp greater than equal to cleaning temp
   {% if printer.extruder.temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
      {% if ( 'False' in want_cold ) %} #False
      #{% if want_cold == "False" %} #False    ###DISABLED so i can clean nozzle at end of print. testing mode
         #{ action_respond_info("already above cleaning temp.") }
         _serialMessages MSG='hotend already above cleaning temp'
         M104 S{cleaning_temp}  ##WITHOUT WAIT
         G4 P{wait_time}
      {% endif %}
   #if current target is less than equal to min extrude temp
   {% elif printer.extruder.temperature <= printer.configfile.settings.extruder.min_extrude_temp %}
   	{% if ( 'False' in want_cold ) %} #False
      #{% if want_cold == "False" %} #False
         #{ action_respond_info("hotend not hot enough, heating up,see me twice") }
         _serialMessages MSG='hotend not hot enough for cleaning heating up'
         G28 Z
         M109 S{cleaning_temp}
      {% endif %}
   {% endif %}

   G4 P{wait_time / 4}

   HomeMe
   G90 #safeguard
   check_if_attached
   G92 E0 # reset etruder
   #{action_respond_info("Extruder Temp: %.1f" % (printer.extruder.temperature))}

   G91
   G0 Z2 F{zspeed}  #raise z before movement
   G90
   M83
   G92 E0 # reset etruder

   G0 X{brush_end_x} Y{brush_end_y} F{speed} ## Move to brush edge position
   G0 Z{brush_height_z} F{zspeed}       ## Move nozzle down into brush..
   {% if ( 'False' in want_cold ) %} #False
      _serialMessages MSG='doing a squirt'
      G1 E2.5 F500 #do a squirt
      G4 P{wait_time / 6}
      G1 E-0.2 F200 # pull it back
      G92 E0 # Reset Extruder
      G4 P{wait_time / 4}
   {% endif %}


   # scrub a dub dub
   {% for wipes in range(1, (wipe_qty + 1)) %}

      M105
      G0 X{brush_start_x} Y{brush_start_y } Z{brush_height_z - brush_lower_z} F{speed}
      G0 X{brush_end_x} Y{brush_start_y } F{speed}

      G0 X{brush_start_x} Y{y_center } Z{brush_height_z + brush_lower_z} F{speed}
      G0 X{brush_end_x} Y{y_center } F{speed}

      G0 X{brush_start_x} Y{brush_end_y } Z{brush_height_z - brush_lower_z} F{speed}
      G0 X{brush_end_x} Y{brush_end_y } F{speed}

      G0 X{brush_start_x} Y{y_center } Z{brush_height_z + brush_lower_z} F{speed}
      G0 X{brush_end_x} Y{y_center } F{speed}
      
      #{action_respond_info("Extruder Temp: %.1f" % (printer.extruder.temperature))}
      {% if wipes == wipe_qty/2 %} ## if wipe no. at half way
         #M109 S{printer.extruder.temperature - 20} #lower current temp by 20c and wait
         M105
         {% if ( 'False' in want_cold ) %} #False
            #{ action_respond_info("doing a reverse squirt") }
            _serialMessages MSG='doing a reverse squirt'  #do a squirt
            G1 E-0.3 F200
            G92 E0 # Reset Extruder
            G4 P{wait_time / 4}
         {% elif ( 'True' in want_cold ) %} #False
            #{ action_respond_info("doing a reverse squirt cold") } ##hoping the extruder is still above the temp.
            #_serialMessages MSG='doing a reverse squirt cold'
            {% if printer.extruder.temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
               _serialMessages MSG='doing a reverse squirt cold'
               G92 E0 # Reset Extruder
               G1 E-5.5 F300 #do a reverse squirt eject filament ?
               G92 E0 # Reset Extruder
               G4 P{wait_time / 4}
            {% endif %}
         {% endif %}
         G28 Z
         G91
         G0 Z-{lower_z_by} F{zspeed} ##let the nozzzle squishout nicely 
         G4 P{wait_time / 2}
         G90
         {% if ( 'False' in want_cold ) %}
            _lowertemp
         {% endif %}
         M104 S0 #turn off hotend to help stop oozing
         G0 Z{brush_height_z - brush_lower_z} F{zspeed}
         #G4 P{wait_time / 2}
      {% endif %}
      {% if wipes == 2 %}
         M104 S0
      {% endif %}

      {% if wipes == wipe_qty -2 %} #if near end home z and continue.
         G28 Z
      {% endif %}
   {% endfor %}

   M400
   G28 Z

##forloop while waiting for nozzle temp to reach x ?
