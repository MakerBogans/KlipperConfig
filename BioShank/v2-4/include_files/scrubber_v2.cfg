
[gcode_macro movetobrush]
gcode:

   {% set x_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_x|float + printer["gcode_macro scrubadubdub"].brush_end_x|float ) / 2 %}
   {% set y_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_y|float + printer["gcode_macro scrubadubdub"].brush_end_y|float ) / 2 %}
   {% set D_state = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}
   #_check_if_homed
   {% if D_state == False %}
      dock_probe
   {% endif %}
   G90
   G0 X{x_center_brush} Y{y_center_brush} F{printer["gcode_macro scrubadubdub"].speed} ## Move to brush center position
   G0 Z{printer["gcode_macro scrubadubdub"].brush_height_z_min} F{printer["gcode_macro scrubadubdub"].zspeedslow}      ## Move nozzle down into brush.

[gcode_macro movetobrushraise]
gcode:

   {% set x_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_x|float + printer["gcode_macro scrubadubdub"].brush_end_x|float ) / 2 %}
   {% set y_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_y|float + printer["gcode_macro scrubadubdub"].brush_end_y|float ) / 2 %}
   {% set D_state = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}
   #_check_if_homed
   {% if D_state == False %}
      dock_probe
   {% endif %}
   G0 X{x_center_brush} Y{y_center_brush} F{printer["gcode_macro scrubadubdub"].speed} ## Move to brush center position
   G0 Z{printer["gcode_macro scrubadubdub"].brush_height_z_max} F{printer["gcode_macro scrubadubdub"].zspeedslow}      ## Move nozzle down into brush.

   #G91
   _check_z_clearance
   #G0 Z5 F{printer["gcode_macro scrubadubdub"].speed}  #need the thing to include other macro variables forgot what it is...
   G90

[gcode_macro movetopurge]
gcode:

   {% set x_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_x|float + printer["gcode_macro scrubadubdub"].brush_end_x|float ) / 2 %}
   {% set y_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_y|float + printer["gcode_macro scrubadubdub"].brush_end_y|float ) / 2 %}
   {% set x_purge = printer["gcode_macro scrubadubdub"].purge_x|float %}
   {% set y_purge = printer["gcode_macro scrubadubdub"].purge_y|float %}
   dock_probe
   _check_z_clearance
   G90
   G0 X{x_purge} Y{y_purge} F{printer["gcode_macro scrubadubdub"].speed} ## Move to brush center position
   G0 Z{printer["gcode_macro scrubadubdub"].brush_height_z_min} F{printer["gcode_macro scrubadubdub"].speed}      ## Move nozzle down into brush.
#[gcode_macro _get_temp] ##used to keep scrubbing till temp drops to x
#gcode:
   #if current temp greater than equal to cleaning temp
#   {% if printer.extruder.temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
#   M105
#   {% endif %}

[gcode_macro quickclean]
variable_wipe_quick:           3
gcode:

   {% set x_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_x|float + printer["gcode_macro scrubadubdub"].brush_end_x|float ) / 2 %}
   {% set y_center_brush = (printer["gcode_macro scrubadubdub"].brush_start_y|float + printer["gcode_macro scrubadubdub"].brush_end_y|float ) / 2 %}
   {% set brush_start_x = (printer["gcode_macro scrubadubdub"].brush_start_x|float ) %}
   {% set brush_start_y = (printer["gcode_macro scrubadubdub"].brush_start_y|float ) %}
   {% set brush_end_x = (printer["gcode_macro scrubadubdub"].brush_end_x|float ) %}
   {% set brush_end_y = (printer["gcode_macro scrubadubdub"].brush_end_y|float ) %}
   {% set brush_height_z_min = (printer["gcode_macro scrubadubdub"].brush_height_z_min|float ) %}
   {% set brush_height_z_max = (printer["gcode_macro scrubadubdub"].brush_height_z_max|float ) %}
   {% set x_purge = printer["gcode_macro scrubadubdub"].purge_x|float %}
   {% set y_purge = printer["gcode_macro scrubadubdub"].purge_y|float %}
   {% set D_state = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}

   #_check_if_homed
   {% if D_state == False %}
      _check_if_homed
      dock_probe
   {% endif %}
   _check_z_clearance

   G90
   SET_VELOCITY_LIMIT ACCEL=40000 ACCEL_TO_DECEL=40000 SQUARE_CORNER_VELOCITY=10.0
   # scrub a dub dub
   {% for wipes in range(1, (wipe_quick + 1)) %}

      M105
      G0 X{brush_start_x} Y{brush_start_y} F{printer["gcode_macro scrubadubdub"].speed}
      G0 X{brush_start_x} Y{brush_start_y} Z{brush_height_z_max} F{printer["gcode_macro scrubadubdub"].speed}
      G0 X{brush_end_x} Y{brush_start_y} F{printer["gcode_macro scrubadubdub"].speed}

      G0 X{brush_start_x} Y{brush_end_y} Z{brush_height_z_min} F{printer["gcode_macro scrubadubdub"].speed}
      G0 X{brush_end_x} Y{brush_end_y} F{printer["gcode_macro scrubadubdub"].speed}

      G0 X{brush_start_x} Y{brush_start_y } Z{brush_height_z_max} F{printer["gcode_macro scrubadubdub"].speed}
      G0 X{brush_end_x} Y{brush_start_y} F{printer["gcode_macro scrubadubdub"].speed}

      G0 X{brush_start_x} Y{brush_end_y} Z{brush_height_z_min} F{printer["gcode_macro scrubadubdub"].speed}
      G0 X{brush_end_x} Y{brush_end_y} F{printer["gcode_macro scrubadubdub"].speed}

   {% endfor %}
   MOVETOBRUSHRAISE


[gcode_macro _lowertemp]
gcode:
   {% set settle_temp = 180|int %}
   #if current temp greater than
   {% if printer.extruder.temperature > 200 %}
      #M109 S{printer.extruder.temperature - lowertemp}
      M106 S255 # this might help lower temp faster
      _serialMessages MSG='dropping hotend temp down to: {settle_temp}'
      
      M109 S{settle_temp}
      M106 S0 # turn off part fan after 
   {% endif %}


[gcode_macro scrubadubdub]
variable_wipe_qty:           10
variable_speed:            20000
variable_zspeed:           10000
variable_zspeedslow:        1000

##                               brush positions are based on nozzle pos
##                               move nozzle to where you want start/end movements to be
variable_brush_start_x:     245.00
variable_brush_end_x:       258.00
variable_brush_start_y:     303.00
variable_brush_end_y:       307.00
variable_brush_height_z_max:      5.0 #1.10 #seems to be perfect
variable_brush_height_z_min:      3.5 #-0.4 #go down this limit
variable_purge_x:           300.00
variable_purge_y:           308.00
variable_cleaning_temp:     180  # oozzeee?
variable_wait_time:         4000 #milliseconds
variable_want_cold:         False

gcode:
   {% set x_center = (brush_start_x|float + brush_end_x|float ) / 2 %}
   {% set y_center = (brush_start_y|float + brush_end_y|float ) / 2 %}
   {% set Hzh = printer["gcode_macro _Tiny_User_Variables"].safe_z_height|float %}##
   #{% set lower_z_by = 8.75 %} #printer['configfile'].config["stepper_z"]["position_min"]|float %}

	{% set want_cold = params.WANT_COLD|default('False') %}
	SET_GCODE_VARIABLE MACRO=scrubadubdub VARIABLE=want_cold VALUE={ want_cold }
   M105
   _check_if_homed
   dock_probe
################################################################################################################################

   #if current temp greater than equal to cleaning temp

   #if current target is less than equal to min extrude temp
   M105
   {% if printer.extruder.temperature <= cleaning_temp %}
   	{% if 'True' in want_cold or 'true' in want_cold %}
      #{% if want_cold == "False" %} #False
         #{ action_respond_info("hotend not hot enough, heating up,see me twice") }
         movetopurge
         _serialMessages MSG='hotend not hot enough for cleaning.. heating up to: {cleaning_temp}'
         M109 S{cleaning_temp} #wait
      {% endif %}
   {% endif %}

   #{% if printer.extruder.temperature >= cleaning_temp %} #no point having this here wastes startup print time.
   #{% if ( 'False' in want_cold ) %} #False
      #{% if printer.extruder.temperature <= cleaning_temp %}
   #   _serialMessages MSG='hotend already above cleaning temp'
   #   M104 S{cleaning_temp}  ##WITHOUT WAIT
   #   G4 P{wait_time}
      #{% endif %}
   #{% endif %}


   {% if 'False' in want_cold or 'false' in want_cold %}
      G4 P{wait_time / 4}
   {% endif %}
   _check_z_clearance
   _check_if_homed
   G90 #safeguard
   dock_probe
   _check_z_clearance
   G92 E0 # reset etruder
   #{action_respond_info("Extruder Temp: %.1f" % (printer.extruder.temperature))}

   G90
   M83
   G92 E0 # reset etruder

   G0 X{brush_end_x} Y{brush_end_y} F{speed} ## Move to brush edge position
   G0 Z{brush_height_z_min} F{zspeed}       ## Move nozzle down into brush..
   SET_VELOCITY_LIMIT ACCEL=40000 ACCEL_TO_DECEL=40000 SQUARE_CORNER_VELOCITY=10.0


   # scrub a dub dub
   {% for wipes in range(1, (wipe_qty + 1)) %}

      M105
      M106 S255
      G0 X{brush_start_x} Y{brush_start_y} Z{brush_height_z_max} F{speed}
      G0 X{brush_end_x} Y{brush_start_y} F{speed}

      G0 X{brush_start_x} Y{brush_end_y} Z{brush_height_z_min} F{speed}
      G0 X{brush_end_x} Y{brush_end_y} F{speed}

      G0 X{brush_start_x} Y{brush_start_y } Z{brush_height_z_max} F{speed}
      G0 X{brush_end_x} Y{brush_start_y} F{speed}

      G0 X{brush_start_x} Y{brush_end_y} Z{brush_height_z_min} F{speed}
      G0 X{brush_end_x} Y{brush_end_y} F{speed}
      
      #{action_respond_info("Extruder Temp: %.1f" % (printer.extruder.temperature))}
      {% if wipes == wipe_qty/2 %} ## if wipe no. at half way
         M105
         {% if printer.extruder.temperature >= cleaning_temp %}
            M106 S255
         {% endif %}
         M104 S0 #turn off hotend to help stop oozing
         MOVETOBRUSH
         G0 Z{brush_height_z_max} F{zspeed}
         #G4 P{wait_time / 2}
      {% endif %}

      {% if wipes == wipe_qty -2 %} #if near end home z and continue.
         G90
         G0 Z{Hzh/2} F{zspeed}
         G28 Z
      {% endif %}
   {% endfor %}

   SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}
   M400
   #G28 Z
   #M106 S0

##forloop while waiting for nozzle temp to reach x ?
