[force_move]
enable_force_move: True

[filament_switch_sensor Dock_Sensor]
pause_on_runout: False
#   When set to True, a PAUSE will execute immediately after a runout
#   is detected. Note that if pause_on_runout is False and the
#   runout_gcode is omitted then runout detection is disabled. Default
#   is True.
#runout_gcode:
#   A list of G-Code commands to execute after a filament runout is
#   detected. See docs/Command_Templates.md for G-Code format. If
#   pause_on_runout is set to True this G-Code will run after the
#   PAUSE is complete. The default is not to run any G-Code commands.
#insert_gcode:
#   A list of G-Code commands to execute after a filament insert is
#   detected. See docs/Command_Templates.md for G-Code format. The
#   default is not to run any G-Code commands, which disables insert
#   detection.
#event_delay: 3.0
#   The minimum amount of time in seconds to delay between events.
#   Events triggered during this time period will be silently
#   ignored. The default is 3 seconds.
#pause_delay: 0.5
#   The amount of time to delay, in seconds, between the pause command
#   dispatch and execution of the runout_gcode. It may be useful to
#   increase this delay if OctoPrint exhibits strange pause behavior.
#   Default is 0.5 seconds
switch_pin: ^PG9



[gcode_macro _Tiny_User_Variables]
variable_verbose:               False # Enable verbose output
variable_travel_speed:          400   # how fast all other travel moves will be (example approaching dock position)
variable_accel_speed:           10000
variable_docking_speed:         50    # how fast the toolhead will move during all dock/undock movements
variable_z_speed:               30    # how fast the z will move
variable_safe_z_height:         13    # safe home height

#positions infront of dock
variable_approach_attach_position_x:  36.80
variable_approach_attach_position_y:  284.00
variable_approach_attach_position_z:  12.0  #need to clear probes pins on approach!!!!!
variable_approach_release_position_z: 14.0 #used for picking up probe

#positions of toolhead when probe is still docked( used for docking and picking it up )
variable_dock_attach_position_x:  36.80
variable_dock_attach_position_y:  305.30
variable_dock_attach_position_z:  2.60 #max z height so probe will now be making a connection while still in dock(carriage and probe faces should be flush)
variable_dock_release_position_z: 14.0 # z coords to move to once pickedup or docked probe

# if a separate Z endstop switch is in use, specify the coordinates of the switch here (Voron).
# Set to 0 to have the probe move to center of bed
variable_z_endstop_x:          207.50
variable_z_endstop_y:          307.8

gcode:
    #not in use yet.

[gcode_macro _Tiny_Probe_Variables]
variable_probe_state:            False
variable_dock_state:             False
gcode:

[gcode_macro _query_tiny_dock]
gcode:

    #QUERY_BUTTON button=Dock_Sensor
    {% set Dock = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}
    #_serialMessages MSG='debug dock state: {Dock}'

    # If triggered (true), probe not attached
    {% if Dock == True %}
        SET_GCODE_VARIABLE MACRO=_Tiny_Probe_Variables VARIABLE=dock_state VALUE={ True }
    # If not triggered (false), probe attached
    {% elif Dock == False %}
        SET_GCODE_VARIABLE MACRO=_Tiny_Probe_Variables VARIABLE=dock_state VALUE={ False }
    {% endif %}

    #_serialMessages MSG='dock state: {Dock}'
    #_serialMessages MSG='Tiny_Probe_Variables dock state: {printer["gcode_macro _Tiny_Probe_Variables"].dock_state}'

[gcode_macro _check_z_clearance]
gcode:

    {% set safe_z_h = printer["gcode_macro _Tiny_User_Variables"].safe_z_height |float %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %} 
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    {% set d_speed = printer["gcode_macro _Tiny_User_Variables"].docking_speed * 60 %}
    
    _check_p
    {% if not 'z' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='setting Z to 0 so Z can be moved'
        SET_KINEMATIC_POSITION z=0
    {% endif %}
    #add checks here to raise/lower z by x if probe is attached
    #{% if printer.toolhead.position.z < safe_z_h %}
    #    _serialMessages MSG='too low moving up'
    #{% endif %}
    {% if printer.toolhead.position.z < safe_z_h %}
        {% if printer.probe.last_query %}
            #_serialMessages MSG='raising Z half'
            G0 Z{safe_z_h / 2 } F{z_speed}
        {% else %}
            #_serialMessages MSG='raising Z full'
            G0 Z{safe_z_h} F{z_speed}
        {% endif %}
    {% endif %}

#only call this macro in print start/QGL ect
[gcode_macro approach_dock]
gcode:

    _check_p
    _approach_dock

[gcode_macro move_to_probe]
gcode:

    _check_p
    _move_to_probe

[gcode_macro _check_p]
gcode:

    QUERY_PROBE
    _set_tiny_probe_state

[gcode_macro _set_tiny_probe_state]
gcode:

    {% if not printer.probe.last_query %}
        #_serialMessages MSG='debug probe state3: attached'
        SET_GCODE_VARIABLE MACRO=_Tiny_Probe_Variables VARIABLE=probe_state VALUE={ True }
    {% else %}
        #_serialMessages MSG='debug probe state3: removed'
        SET_GCODE_VARIABLE MACRO=_Tiny_Probe_Variables VARIABLE=probe_state VALUE={ False }
    {% endif %}

[gcode_macro _approach_dock] #never call this macro!
gcode:

    {% set approach_a_X = printer["gcode_macro _Tiny_User_Variables"].approach_attach_position_x |float %}
    {% set approach_a_Y = printer["gcode_macro _Tiny_User_Variables"].approach_attach_position_y |float %}
    {% set approach_a_Z = printer["gcode_macro _Tiny_User_Variables"].approach_attach_position_z |float %} #need to clear probes pins on approach!!!!!
    {% set approach_r_Z = printer["gcode_macro _Tiny_User_Variables"].approach_release_position_z |float %}
    {% set dock_a_Z = printer["gcode_macro _Tiny_User_Variables"].dock_attach_position_z |float %}         # used for docking probe only!!
    {% set dock_r_Z = printer["gcode_macro _Tiny_User_Variables"].dock_release_position_z |float %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %}
    {% set d_speed = printer["gcode_macro _Tiny_User_Variables"].docking_speed * 60 %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    
    {% set D_state = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}
    {% set P_state = printer["gcode_macro _Tiny_Probe_Variables"].probe_state %}
    
    #{% if not printer.probe.last_query %}
    #    _serialMessages MSG='ready to dock probe'
    #{% endif %}
    #{% if printer.probe.last_query %}
    #    _serialMessages MSG='ready to pick up probe'
    #{% endif %}


    {% if D_state == True %} # true = dock sensor triggered
        #_serialMessages MSG='sensors indicate probe is docked'
    {% endif %}
    {% if D_state == False %}
        #_serialMessages MSG='sensors indicate probe is missing or attached to toolhead'
    {% endif %}



    #if probe not attached and docked pick it up
    _check_p
    G90 # absolute position mode
    {% if printer.probe.last_query %}
        #_serialMessages MSG='ready to pick up probe'
        {% if D_state == True %} # true = dock sensor triggered
            #_serialMessages MSG='sensors indicate probe is docked.all ok to continue'
            #move to coords
            
            #_serialMessages MSG='moving to coords X{approach_a_X} Y{approach_a_Y}'
            G0 X{approach_a_X} Y{approach_a_Y} Z{approach_r_Z} F{speed}
            #G0 Z{approach_a_Z} F{z_speed}
            #G0 Z{approach_r_Z} F{z_speed}
        {% else %}
            #_serialMessages MSG='err;probe not attached and not docked.must be missing'
            {action_raise_error("err;probe not attached and not docked.must be missing")}
        {% endif %}

    {% endif %}

    {% if not printer.probe.last_query %}
        #_serialMessages MSG='ready to dock probe'
        {% if D_state == True %} # true = dock sensor triggered
            #_serialMessages MSG='sensors indicate probe is docked and attached, ready to leave dock'
            
            G0 X{approach_a_X} Y{approach_a_Y} F{d_speed}
            _check_z_clearance
            #G0 Z{dock_r_Z} F{z_speed} # used for docking probe only!!
        {% else %}
            #_serialMessages MSG='probe attached and dock sensor empty. ok to continue.'
            G0 X{approach_a_X} Y{approach_a_Y} F{speed}
            G0 Z{dock_a_Z} F{z_speed} # used for docking probe only!!
        {% endif %}

    {% endif %}

[gcode_macro _move_to_probe] #coords when toolhead is above probe ready for pickup/docking
gcode:
    {% set approach_a_X = printer["gcode_macro _Tiny_User_Variables"].approach_attach_position_x |float %}
    {% set approach_a_Y = printer["gcode_macro _Tiny_User_Variables"].approach_attach_position_y |float %}
    {% set approach_r_Z = printer["gcode_macro _Tiny_User_Variables"].approach_release_position_z |float %}

    {% set dock_a_X = printer["gcode_macro _Tiny_User_Variables"].dock_attach_position_x |float %}
    {% set dock_a_Y = printer["gcode_macro _Tiny_User_Variables"].dock_attach_position_y |float %}
    {% set dock_a_Z = printer["gcode_macro _Tiny_User_Variables"].dock_attach_position_z |float %} # used for docking probe only!!
    {% set dock_r_Z = printer["gcode_macro _Tiny_User_Variables"].dock_release_position_z |float %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %}
    {% set d_speed = printer["gcode_macro _Tiny_User_Variables"].docking_speed * 60 %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    
    {% set D_state = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}
    {% set P_state = printer["gcode_macro _Tiny_Probe_Variables"].probe_state %}

    {% set offset  = printer.gcode_move.homing_origin.z | float %}
    {% if offset < 0 %}
        {% set offset_apply  = 1 | int %}
        #_serialMessages MSG='probe offset exists less than 0'
    {% elif offset > 0 %}
        {% set offset_apply  = 0 | int %}
        #_serialMessages MSG='probe offset exists less than 0'
    {% endif %}
    #_serialMessages MSG='offset: {offset}'


    #{% if D_state == True %} # true = dock sensor triggered
    #    _serialMessages MSG='sensors indicate probe is docked'
    #{% endif %}
    #{% if D_state == False %}
    #    _serialMessages MSG='sensors indicate probe is missing or attached to toolhead'
    #{% endif %}

    #toolhead should be infront of dock and above probe pins when calling this one.
    _check_p
    G90 # absolute position mode
    #if probe not attached and docked pick it up
    {% if printer.probe.last_query %}
        #_serialMessages MSG='ready to pick up probe'
        {% if D_state == True %} # true = dock sensor triggered
            #_serialMessages MSG='sensors indicate probe is docked.all ok to continue'
            #move to coords
            
            #_serialMessages MSG='moving to coords'##
            G0 X{dock_a_X} Y{dock_a_Y} F{d_speed}
            G0 Z{dock_a_Z} F{z_speed} #lower down onto pins
        {% else %}
            _serialMessages MSG='err;probe not attached and not docked.must be missing'
            {action_raise_error("err;probe not attached and not docked.must be missing")}
        {% endif %}

    {% endif %}

    {% if not printer.probe.last_query %}
        #_serialMessages MSG='ready to dock probe'
        {% if D_state == True %} # true = dock sensor triggered
            #_serialMessages MSG='sensors indicate probe is docked and attached. abort'
            {action_raise_error("err;probe is already attached - and docked")}
        {% else %}
            #_serialMessages MSG='probe attached and dock sensor empty. ok to continue.'
            #if toolhead pos is at the required position continue !!!!!!
            {% if (printer.toolhead.position.x == approach_a_X) %}
                {% if (printer.toolhead.position.y == approach_a_Y) %}
                    _serialMessages MSG='offset: {offset}'
                    SET_GCODE_OFFSET Z=0.0
                    {% if printer.bed_mesh.profile_name == "" %}
                        _serialMessages MSG='mesh not applied'
                        #{% if printer.toolhead.position.z <= 3.10 and printer.toolhead.position.z >= 2.79 %} ## used for positive offset bed probe position
                        {% if printer.toolhead.position.z == dock_a_Z %}
                        ## mgiht be able to use {% set adapted_x_min = [adapted_x_min , bed_mesh_min[0]] | max %}
                        ## to lower z by this extra amount  will need this coords mesh z offset number


                        #{% if printer.toolhead.position.z <= (dock_a_Z + 0.15) and printer.toolhead.position.z >= (dock_a_Z - 0.15) %}
                            G90 # absolute position mode
                            G0 X{dock_a_X} Y{dock_a_Y} F{d_speed}
                            G0 Z{dock_a_Z} F{z_speed} # used for docking probe only!!
                        {% else %}
                            _serialMessages MSG='unable to dock probe, suggestion clean nozzle!!'
                            {action_raise_error("err;unable to dock probe, suggestion clean nozzle!!!")}
                        {% endif %}
                    {% else %}
                        { action_respond_info( "The {} mesh is loaded.".format(printer.bed_mesh.profile_name) ) }
                        G90 # absolute position mode
                        G0 X{dock_a_X} Y{dock_a_Y} F{d_speed} ###
                        G0 Z{dock_a_Z} F{z_speed} # used for docking probe only!!
                    {% endif %}
                {% endif %}
            {% endif %}
        {% endif %}

    {% endif %}

[gcode_macro _pickup_dock_probe]
gcode:

    {% set dock_r_Z = printer["gcode_macro _Tiny_User_Variables"].dock_release_position_z |float %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %}
    {% set D_state = printer["filament_switch_sensor Dock_Sensor"].filament_detected %}
    {% set P_state = printer["gcode_macro _Tiny_Probe_Variables"].probe_state %}
    {% set _should_attach = params._SHOULD_ATTACH|default('False') %}

    {% if D_state == True %} # true = dock sensor triggered
        #_serialMessages MSG='sensors indicate probe is docked'
    {% endif %}
    {% if D_state == False %}
        #_serialMessages MSG='sensors indicate probe is missing or attached to toolhead'
    {% endif %}


    _check_if_homed
    {% if ( 'True' in _should_attach or 'true' in _should_attach ) %} #True
        #start moving to pick up.
        {% if printer.probe.last_query %}
            {% if D_state == True %}
                #_serialMessages MSG='ready to pickup probe'
                _check_z_clearance
                approach_dock
                move_to_probe
                approach_dock # moving away since now it should be attached.
                _check_z_clearance # raise Z and get ready for QGL and mesh

            {% else %}
                _serialMessages MSG='err;probe not attached and not docked.must be missing!!'
                {action_raise_error("err;probe not attached and not docked.must be missing!!")}
            {% endif %}
        {% endif %} 
        
        #confim new probe/dock states if unchanged
    {% endif %}
    {% if ( 'False' in _should_attach or 'false' in _should_attach ) %} #False
        #start moving to dock.
        {% if not printer.probe.last_query %}
            #_serialMessages MSG='ready to dock probe'
            {% if D_state == False %}
                _check_z_clearance
                approach_dock
                move_to_probe
                #G0 Z{dock_r_Z} F{z_speed}
                _check_z_clearance
            {% else %}
                _serialMessages MSG='err;probe attached and docked. or sensor error'
            {% endif %}
        {% else %}
            #do nothing. why try to dock drop when it's not attached..
        {% endif %} 
        #confim new probe/dock states if unchanged
    {% endif %}

[gcode_macro attach_probe]
gcode:
    _check_p
    _pickup_dock_probe _SHOULD_ATTACH='True'
    _check_z_clearance
    _check_p

[gcode_macro dock_probe]
gcode:
    _check_p
    _pickup_dock_probe
    _check_z_clearance
    _check_p

[gcode_macro _check_if_homed]
gcode:

    _check_p
    _check_z_clearance
    # if x and y are not homed
    {% if not 'xy' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='homing XY'
        G28 X Y
    {% endif %}
    {% if not 'z' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='homing Z'
        G28 Z
    {% endif %}

# Probe Calibrate
[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
description:Calibrate the probes z_offset with klicky automount
gcode:

    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}
    #_serialMessages MSG='x_min:{x_min} y_min:{y_min}\n x_max:{x_max} y_max: {y_max}'
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed %}
    {% set z_speed = printer["gcode_macro _Tiny_User_Variables"].z_speed * 60 %}


    _check_if_homed


    # Go to Z safe distance before saving location in order to
    # avoid crashing the probe on the bed when coming back
    #{% if printer["gcode_macro _User_Variables"].probe_lock == True %}
    {% if printer.probe.last_query %} #if not attached
        _check_z_clearance
    {% endif %}
    #Protect against PROBE ACCURACY performed from outside the bed


    {% if (printer.toolhead.position.y >= (y_min - probe_offset_y) and printer.toolhead.position.y <= (y_max + probe_offset_y) ) %}
        {% if (printer.toolhead.position.x >= (x_min -probe_offset_x ) and printer.toolhead.position.x <= (x_max + probe_offset_x ) ) %}

            M400
            SAVE_GCODE_STATE NAME=_original_nozzle_location_cal
            {% if printer.probe.last_query %}#if not attached
                attach_probe
            {% endif %}

            _check_z_clearance
            RESTORE_GCODE_STATE NAME=_original_nozzle_location_cal MOVE=1 MOVE_SPEED={speed}

            _PROBE_CALIBRATE {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
            SAVE_GCODE_STATE NAME=_original_nozzle_location_cal
            dock_probe
            _check_z_clearance

            RESTORE_GCODE_STATE NAME=_original_nozzle_location_cal MOVE=1 MOVE_SPEED={speed}
            G91
            G0 X{probe_offset_x} Y{probe_offset_y} F{z_speed / 2 } # move nozzle to probes coords
            G90
            G0 Z2 F{z_speed / 2 }

        {% else %}
            _serialMessages MSG='out of bounds!!'
        {% endif %}
    {% else %}
        _serialMessages MSG='out of bounds!!'
    {% endif %}

# Probe Accuracy
[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
description:Probe Z-height accuracy at current XY position with klicky automount
gcode:

    {% set probe_offset_x = printer['configfile'].config["probe"]["x_offset"]|float %}
    {% set probe_offset_y = printer['configfile'].config["probe"]["y_offset"]|float %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed %}
    
    {% set bed_mesh_min = printer.configfile.settings.bed_mesh.mesh_min %}
    {% set bed_mesh_max = printer.configfile.settings.bed_mesh.mesh_max %}
    {% set x_min = bed_mesh_min[0] %}
    {% set y_min = bed_mesh_min[1] %}
    {% set x_max = bed_mesh_max[0] %}
    {% set y_max = bed_mesh_max[1] %}


    #_serialMessages MSG='x_min:{x_min} y_min:{y_min}\n x_max:{x_max} y_max: {y_max}'
    
    {% if not 'xy' in printer.toolhead.homed_axes %}
        _check_if_homed
    {% endif %}
    {% if (printer.toolhead.position.y >= (y_min - probe_offset_y) and printer.toolhead.position.y <= (y_max + probe_offset_y) ) %}
        {% if (printer.toolhead.position.x >= (x_min -probe_offset_x ) and printer.toolhead.position.x <= (x_max + probe_offset_x ) ) %}
            M400
            {% if not printer.probe.last_query %}
                _check_z_clearance
            {% endif %}
            SAVE_GCODE_STATE NAME=_original_nozzle_location_acc

            {% if printer.probe.last_query %}#if not attached
                _serialMessages MSG='not attached picking up'
                attach_probe
            {% endif %}

            # Restore nozzle location to probe the right place
            RESTORE_GCODE_STATE NAME=_original_nozzle_location_acc MOVE=1 MOVE_SPEED={speed}

            _PROBE_ACCURACY {% for p in params %}{'%s=%s ' % (p, params[p])}{% endfor %}
            # _PROBE_ACCURACY SAMPLE_RETRACT_DIST=5.0

                #Dock_Probe ##disabled so i can run several at a time
                #onyl downside to disbling this is that if you try to move z lower while it's still attached printer will bottom out.
                #perhaps have a temp position of having z0 0.10mm lower than probes trigger point ?

            # Restore nozzle location again at the end
            #RESTORE_GCODE_STATE NAME=_original_nozzle_location_acc MOVE=1 MOVE_SPEED={speed}
        {% else %}
            _serialMessages MSG='out of bounds!!'
        {% endif %}
    {% else %}
        _serialMessages MSG='out of bounds!!'
    {% endif %}

# Homeing Override
[homing_override]
axes:                             xyz
gcode:

    {% set Zendstop_X = printer["gcode_macro _Tiny_User_Variables"].z_endstop_x |float %}
    {% set Zendstop_Y = printer["gcode_macro _Tiny_User_Variables"].z_endstop_y |float %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    
    SET_VELOCITY_LIMIT ACCEL=10000 ACCEL_TO_DECEL=10000 square_corner_velocity=5.0
    # reset parameters
    {% set X, Y, Z = False, False, False %}

    # which axes have been requested for homing
    {% if not 'X' in params
        and not 'Y' in params
        and not 'Z' in params %}

        {% set X, Y, Z = True, True, True %}

    {% endif %}

    {% if 'X' in params %}
        {% set X = True %}
    {% endif %}

    {% if 'Y' in params %}
        {% set Y = True %}
    {% endif %}

    {% if 'Z' in params %}
        {% set Z = True %}
    {% endif %}

    {% if not 'z' in printer.toolhead.homed_axes %}
        #_serialMessages MSG='setting Z to 0 so Z can be moved'
        SET_KINEMATIC_POSITION z=0
    {% endif %}

    # Home x
    {% if X %}
        #_serialMessages MSG='homing x'
        _check_z_clearance
        G28 X
    {% endif %}
    {% if Y %}
        #_serialMessages MSG='homing y'
        _check_z_clearance
        #G28 Y
        _Home_Y
    {% endif %}

    # Home z
    {% if Z %}
    
        # if probe is configured as endstop, attach it, else dock the probe if attached
        _check_p
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            {action_raise_error("err;incompatible with virtual endstop")}
        {% else %}
            #check_if_attached
        {% endif %}

        _Home_Z

        # if probe is configured as endstop, dock it
        #{% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
        #    check_if_attached
        #{% endif %}
    {% endif %}
    _check_p
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.configfile.settings.printer.square_corner_velocity}

# Home Z Routine
[gcode_macro _Home_Z]
gcode:

    {% set Zendstop_X = printer["gcode_macro _Tiny_User_Variables"].z_endstop_x |float %}
    {% set Zendstop_Y = printer["gcode_macro _Tiny_User_Variables"].z_endstop_y |float %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}

    # if x and y are not homed yet, raise error
    {% if not 'xy' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X and Y Axis First!") }

    {% else %}
        _check_z_clearance

        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            {action_raise_error("err;incompatible with virtual endstop")}
        {% else %}
            #check_if_attached
        {% endif %}

        G90 # absolute position mode
        G0 X{Zendstop_X} Y{Zendstop_Y} F{speed}
        G28 Z
        {% if printer['configfile'].config["stepper_z"]["endstop_pin"] == 'probe:z_virtual_endstop' %}
            {action_raise_error("err;incompatible with virtual endstop")}
        {% else %}
            _check_z_clearance
        {% endif %}
    {% endif %}



[gcode_macro _Home_Y]
gcode:

    {% set Zendstop_X = printer["gcode_macro _Tiny_User_Variables"].z_endstop_x |float %}
    {% set Zendstop_Y = printer["gcode_macro _Tiny_User_Variables"].z_endstop_y |float %}
    {% set speed = printer["gcode_macro _Tiny_User_Variables"].travel_speed * 60 %}
    {% set x_retract_dist = 2 %} #printer.toolhead.retract_dist.x %}
    {% set x_max = printer.toolhead.axis_maximum.x %}

    # prototype testing before homing Y axis move X to the left a little, this will help with ribbon cable flexing
    {% if not 'x' in printer.toolhead.homed_axes %}
        { action_raise_error("Must Home X Axis First!") }

    {% elif 'x' in printer.toolhead.homed_axes %}
        #{% if printer.toolhead.position.x == x_max %} #only move x if it just homed x, otherwise sending G28 Y from else where could cause issues?
        G90
        G0 X{Zendstop_X} F{speed}
        G28 Y
        #{% endif %}
    {% endif %}
