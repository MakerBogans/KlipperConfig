[gcode_macro QUAD_GANTRY_LEVEL]
rename_existing: BASE_QGL
gcode:
    BED_MESH_CLEAR
    SET_VELOCITY_LIMIT ACCEL=10000 ACCEL_TO_DECEL=10000
    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=0.6
    HomeMe
    G28 Z
    check_if_attached _SHOULD_ATTACH=True##if already attached
    BASE_QGL
    G28 Z
    SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}

[gcode_macro HomeMe]
gcode:
    {% if not 'z' in printer.toolhead.homed_axes %}
        G28
        check_if_attached
    {% endif %}
    
[gcode_macro Center]
gcode:
    #{% set Mx = printer['configfile'].config["stepper_x"]["position_max"]|float %}
    #{% set My = printer['configfile'].config["stepper_y"]["position_max"]|float %}
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
	{% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
    HomeMe
    check_if_attached
    #G0 x150 Y150 Z2 f9000
    G0 x{x_center} Y{y_center} Z2 f9000


[gcode_macro _messagewaiting]
gcode:
    {% set message = params.MSG|int %}
    {% set loopnumber = params.LOOPNUMBER|int %}
	
    {% if message == 1 %}
        { action_respond_info("waiting") }
    {% elif message == 2 %}
        { action_respond_info("attach probe now") }
    {% elif message == 3 %}
        { action_respond_info("remove probe now") }
    {% elif message == 4 %}
        { action_respond_info("probe attached, homing axis") }
    {% elif message == 5 %}
        { action_respond_info("timer started") }
    {% elif message == 6 %}
        { action_respond_info("loop: %s" % loopnumber)  }
    {% endif %}


[gcode_macro wait_attach_remove]
variable_waitloops: 5 #seconds 
variable_waitduration: 3000
gcode:
    {% if not 'z' in printer.toolhead.homed_axes %}
        G28
    {% endif %}
    G0 Y260 Z60 F2600 #move to position to attach probe #testing
    {% set _should_attach = params._SHOULD_ATTACH|default('False') %}
    #{waiting} = 5
    {% if ( 'True' in _should_attach ) %}
        _CheckProbe action=query
        {% if printer.probe.last_query == False %} #if attached ;True = triggered
            { action_respond_info("False: should say open, probe already attached.")  }
            _messagewaiting MSG=4 LOOPNUMBER=0
            G0 x150 Y150 f12000 #start printing
        {% elif printer.probe.last_query == True %} #if attached and i don't want it to be go into loop
            G0 Y260 Z60 F2600 #move to position to attach probe
            {% for waiting in range(1, (waitloops + 1)) %}
                #{ action_respond_info("loop: %s" % waiting)  }
                _messagewaiting MSG=6 LOOPNUMBER={waiting} #what loop number?
                {% if waiting > 1 %}
                    _messagewaiting MSG=5 LOOPNUMBER={waiting}
                    G4 P{waitduration} # 1000 =1 second 
                    _CheckProbe action=query
                    {% if printer.probe.last_query == True %} #if attached ;True = open
                        _messagewaiting MSG=2 LOOPNUMBER={waiting}
                    #{% else %}
                        #{% if waiting > 1 %}
                            #{waiting} = {waiting}-1
                            #SET_GCODE_VARIABLE MACRO=wait_attach_remove VARIABLE=waitloops VALUE={waitloops}+1
                            G4 P{waitduration} # 1000 =1 second
                            _messagewaiting MSG=1 LOOPNUMBER={waiting}
                        #{% endif %}
                    {% endif %}
                {% endif  %}
            {% endfor %}
        {% endif %}

#######################################################################################################
##why no while loops ? >:(
#######################################################################################################

    {% elif ( 'False' in _should_attach ) %} #False
        _CheckProbe action=query
        {% if printer.probe.last_query == True %} #if attached ;False = open so it's attached.
            { action_respond_info("True: should say triggerd, probe NOT attached.")  }
            _messagewaiting MSG=4 LOOPNUMBER=0
            G0 x150 Y150 f12000 #start printing
        {% elif printer.probe.last_query == False %} #it's attached and i don't want it to be so wait to remove it.
            G0 Y260 Z60 F2600 #move to position to remove probe
            {% for waiting in range(1, (waitloops + 1)) %}
                _messagewaiting MSG=6 LOOPNUMBER={waiting}
                {% if waiting > 1 %}
                    _messagewaiting MSG=5 LOOPNUMBER={waiting}
                    G4 P{waitduration} # 1000 =1 second 
                    _CheckProbe action=query
                    {% if printer.probe.last_query == False %}
                        _messagewaiting MSG=3 LOOPNUMBER={waiting}
                    #{% else %}
                        #{% if waiting > 1 %}
                            #{waiting} = {waiting}-1 # why this no work? unless i change the wait dur counter thing to higher number?
                            #SET_GCODE_VARIABLE MACRO=wait_attach_remove VARIABLE=waitloops VALUE={waitloops}+1
                            G4 P{waitduration} # 1000 =1 second 
                            _messagewaiting MSG=1 LOOPNUMBER={waiting}
                        #{% endif %}
                    {% endif %}
                {% endif  %}
            {% endfor %}
        {% endif %}
    {% endif %}


[gcode_macro check_if_attached]
#variable_shouldattach:               False # should probe be attached
gcode:
	{% set _should_attach = params._SHOULD_ATTACH|default('False') %}
    #{% set should_attach = printer["gcode_macro check_if_attached"].shouldattach %}
    ## probe open  need to check before center. need to have two macros.
    ## check probe before z movement
    ##and check probe to save docking it twice and try pick it up again if it fails
    _CheckProbe action=query
    {% if ( 'True' in _should_attach ) %} #True
        {% if printer.probe.last_query == False %} #if attached ;True = triggered
            { action_respond_info("true already attached") }
            #{ action_respond_info("PICKING UP PROBE") }
            ATTACH_PROBE_LOCK
        {% elif printer.probe.last_query == True %} #if not attached and it should be. pick it up.
            { action_respond_info("true should be docked.") }
            { action_respond_info("PICKING UP PROBE") }
            DOCK_PROBE_UNLOCK
            DOCK_PROBE
            ATTACH_PROBE_LOCK
        {% endif %}
    {% elif ( 'False' in _should_attach ) %} #False
        {% if printer.probe.last_query == False %} #if attached ;false = open
            #{ action_respond_info("false should be open/attached") }
            { action_respond_info("send help dock probe first") }
            DOCK_PROBE_UNLOCK
            DOCK_PROBE
        {% elif printer.probe.last_query == True %} #if not attached and it should be. pick it up.
            #{ action_respond_info("false already attached") }
            { action_respond_info("dropping probe off") }
            DOCK_PROBE_UNLOCK
            DOCK_PROBE
        {% endif %}
    {% endif %}


        #{% if printer['gcode_macro _Probe_Variables'].probe_lock  == False %} #starts out as false
            #{ action_respond_info("send help probe is unlocked.") }
            #DOCK_PROBE
        #{% elif printer['gcode_macro _Probe_Variables'].probe_lock  == True %}
        #    { action_respond_info("send help dock probe first") }
        #    DOCK_PROBE
        #    DOCK_PROBE_UNLOCK
        #{% endif %}



[gcode_macro tighten_belts]
gcode:
    # Airprint a box for belt adjustment. 
    # First belts should be loose, almost dropping off. 

    # Home first then drop the bed 25 mm. You should do this manually, but uncomment to do automatically.
    #G28
    G1 Z25

    # Run the below code and the belts will vibrate like a guitar string.
    # Tighten a little bit and repeat until the belts get to a point where they don’t vibrate.
    # At that point, you’re done.
    G1 X10 Y10 F6000 # front left corner
    G1 X10 Y250 F6000 # back left corner
    G1 X250 Y250 F6000 # back right corner
    G1 X250 Y10 F6000 # front right corner
    G1 X10 Y250 F6000 # back left corner

[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
variable_parameter_PRINT_MIN : 0,0
variable_parameter_PRINT_MAX : 0,0
gcode:
    # Parameters
    G90 ; absolute position mode
    G92 E0 ; Reset Extruder
    {% set bedtemp = params.BED|default(112)|int %}
    {% set hotendtemp = params.HOTEND|default(260)|int %}
    {% set chambertemp = params.CHAMBER|default(0)|int %}
    {% set skirts = params.SKIRTS|default(0)|int %}
    {% set brim = params.BRIM|default(0)|int %}
    {% set material = params.MATERIAL|string %}
    {% set layerheight = params.LAYER_HEIGHT|float %}


    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1
    SET_FAN_SPEED FAN=Skirt_Fan1 SPEED=1
    SET_FAN_SPEED FAN=Skirt_Fan2 SPEED=0.80
    M83 ; use relative distances for extrusion
    M104 S{hotendtemp /2 }               ;start heating hotend WITHOUT WAIT
    M140 S{bedtemp}         ;start heating bed WITHOUT WAIT
    G4 P2000                ;milliseconds

    _check_bed_surface BED={bedtemp} MATERIAL={material} ACTIONS_BEFORE_NOZZLE=1
    scrubadubdub
    M104 S0                 ;turn off nozzle if noise is bad.
    
    #if bed is at 110 then surface is 102
    movetobrush
    #G0 Z15 F4000

    ##if surface temp is less than 100 
    #printer.configfile.settings.Bed_Surface
    _set_printing_values LAYER_HEIGHT={layerheight}
    _check_bed_surface BED={bedtemp} MATERIAL={material} ACTIONS_BEFORE_NOZZLE=0
    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1
    M140 S{bedtemp}         ;set bed temp back to normal
    G4 P4000                ;milliseconds
    QUAD_GANTRY_LEVEL
    BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}
    #calibrate_z

    #movetobrush
    G0 X280 Y300 Z5 F8000
    #need to move to a point to stop oozing when heating up

    M190 S{bedtemp}         ;start heating bed and WAIT
    M109 S{hotendtemp}      ;start heating hotend and WAIT
    movetobrush
    

    {% if skirts > 1 %}
        { action_respond_info("skirt enabled, no purge") }
    {% elif brim > 1 %}
        { action_respond_info("brim enabled, no purge") }
    {% else %}
        PURGELINE
    {% endif %}
    
    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=1
    G92 E0

[gcode_macro PRINT_END]
gcode:
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-4.5 F8000                 ; retract filament i could tune this to give the filament a nice point tip lol...
    G91                            ; relative positioning
    G0 Z1 F2400                    ; go up a little
    G90                            ; Absolute positioning
    G0 X280 Y280 F20000            ; stringing bad move away from part

    #M140 S85 ;lower bed temp 
    scrubadubdub WANT_COLD=True
    G28 Z
    
    ;M84 X Y E ;Disable all steppers but Z
    M106 S0 ;Turn-off fan
    M104 S0 ;Turn-off hotend
    M140 S0 ;Turn-off bed
    SET_FAN_SPEED FAN=Octopus_Drivers SPEED=0.5
    ;M141 S0; Turn-off chamber

[gcode_macro _set_printing_values]
gcode:
    {% set layerheight = params.LAYER_HEIGHT|float %}

    #SET_GCODE_OFFSET Z=0.0 #reset the offset before starting each print.
    {% if layerheight == 0.1 %}
        { action_respond_info("setting values for: %s" % layerheight)  }
        SET_PRESSURE_ADVANCE ADVANCE=0.024
        # SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1
    {% elif layerheight == 0.2 %}
        { action_respond_info("setting values for: %s" % layerheight)  }
        SET_PRESSURE_ADVANCE ADVANCE=0.034
        # SET_GCODE_OFFSET Z_ADJUST=-0.005 MOVE=1
    {% else %}
        { action_respond_info("error setting PA values")  }
    
    {% endif %}

[gcode_macro _check_bed_surface] ## i think i have to have this here because of they way klipper works...
gcode:
    {% set bedtemp = params.BED|default(112)|int %}
    {% set material = params.MATERIAL|string %}
    {% set actions_before_nozzle = params.ACTIONS_BEFORE_NOZZLE|default(0)|int %}

    ##      with bed base at 112 surface seems to stabilize at around 103.8 - 104c        

    {% if printer['temperature_sensor Bed_Surface'].temperature >= 105.5 %} ##greater than
        { action_respond_info("waiting for bed surface to cool down.") }
        {% if actions_before_nozzle == 1 %}#before nozzle scrub
            M140 S{bedtemp - 4 } #nowait
        {% elif actions_before_nozzle == 0 %}
            M190 S{bedtemp - 4 }         
            TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-9} MAXIMUM={bedtemp-6}
            M190 S{bedtemp}              
        {% endif %}
    {% elif printer['temperature_sensor Bed_Surface'].temperature < 102 %} ##less than
        { action_respond_info("waiting for bed surface to heat up.") }
        {% if actions_before_nozzle == 1 %} #before nozzle scrub
            {% if material == 'ABS' %}
                M140 S{bedtemp +3 } #nowait
            {% elif material == 'PLA' %}
                M140 S{bedtemp +8} #nowait
            {% else %}
                M140 S{bedtemp +2} #nowait
            {% endif %}
            M140 S{bedtemp}        #nowait
        {% elif actions_before_nozzle == 0 %}
            {% if material == 'ABS' %}
                M190 S{bedtemp +3 }   ;start heating bed and WAIT bumping up by 2 might help surfac get to temp a bit better.
                TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-9} MAXIMUM={bedtemp-6}
            {% elif material == 'PLA' %}
                M190 S{bedtemp +8}
                TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-1} MAXIMUM={bedtemp+2}
            {% else %}
                M190 S{bedtemp +2}
            {% endif %}
            M190 S{bedtemp}              ;start heating bed and WAIT
        {% endif %}
    {% endif %}

[gcode_macro M48] #current pos
gcode:
    PROBE_ACCURACY

[gcode_macro purgeline]
gcode:
    check_if_attached
    HomeMe

   {% if printer.extruder.target <= printer.configfile.settings.extruder.min_extrude_temp %}
      M109 S{printer.configfile.settings.extruder.min_extrude_temp +60}
   {% endif %}

    check_if_attached
    movetobrush
    G1 Z2.0 F2400 ; Move Z Axis up little to prevent scratching of Heat Bed
    G1 X20 Y20 F5000 ; Move to start position before lowering Z
    G1 X20 Y20 Z0.35 F5000 ; Move to start position
    G1 X20 Y100.0 Z0.35 F1500 E10 ; Draw the first line
    G1 X21 Y100.0 Z0.35 F5000 ; Move to side a little
    G1 X21 Y20 Z0.35 F1500 E10 ; Draw the second line
    G92 E0 ; Reset Extruder
    G1 Z5 F2400
    G90                                     ; Absolute positioning
    G1 E-0.3 F1500                         ; retract filament
    G92 E0 ; Reset Extruder

# Convert Marlin linear advance (M900) commands to Klipper (SET_PRESSURE_ADVANCE) commands.
# Used in conjunction with Marlin's linear advance calibration tool: 
# https://marlinfw.org/tools/lin_advance/k-factor.html
[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}