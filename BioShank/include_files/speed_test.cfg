# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10
[gcode_macro _vars_speed]
gcode:
   #{ action_respond_info("dropping temp down by: % tmp_temp % " (tmp_temp|float) ) }
	{% set remaining  = params.i|int %}
	{ action_respond_info("loop: %remaining% "), remaining  }

[gcode_macro TEST_SPEED]
gcode:
	# Speed
	{% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
	# Iterations
	{% set iterations = params.ITERATIONS|default(5)|int %}
	# Acceleration
	{% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
	# Bounding box (in case the machine min/maxes are not perfect)
	{% set bound = params.BOUND|default(20)|int %}
	{% set boundz = params.BOUND|default(120)|int %}
	
	# Set speed test bounds (machine minimum/maximum positions, inset by the bounding box)
	{% set x_min = printer.toolhead.axis_minimum.x + bound %}
	{% set x_max = printer.toolhead.axis_maximum.x - bound %}
	{% set y_min = printer.toolhead.axis_minimum.y + bound %}
	{% set y_max = printer.toolhead.axis_maximum.y - bound %}
	{% set z_min = printer.toolhead.axis_minimum.z + boundz %}
	{% set z_max = printer.toolhead.axis_maximum.z - boundz + 10 + printer.toolhead.axis_minimum.z %}
	# Save current gcode state (absolute/relative, etc)
	SAVE_GCODE_STATE NAME=TEST_SPEED
	
	# Absolute positioning
	G90
	
	# Set new limits
	SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

	# Home and get position for comparison later:
		G28
		# QGL if not already QGLd (only if QGL section exists in config)
		{% if printer.configfile.settings.quad_gantry_level %}
			{% if printer.quad_gantry_level.applied == False %}
				QUAD_GANTRY_LEVEL
				G28 Z
			{% endif %}
		{% endif %}	
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_minimum.z + 20} F{30 * 60}
		G4 P1000 
		GET_MCU_POSITION

	# Go to starting position
	G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}

	{% for i in range(iterations) %}
		# Diagonals
		G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}
		G0 X{x_max} Y{y_max} Z{z_max} F{speed * 60}
		G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}
		G0 X{x_max} Y{y_min} Z{z_max} F{speed * 60}
		G0 X{x_min} Y{y_max} Z{z_min} F{speed * 60}
		G0 X{x_max} Y{y_min} Z{z_max} F{speed * 60}
		
		# Box
		G0 X{x_min} Y{y_min} Z{z_min} F{speed * 60}
		G0 X{x_min} Y{y_max} Z{z_max} F{speed * 60}
		G0 X{x_max} Y{y_max} Z{z_min} F{speed * 60}
		G0 X{x_max} Y{y_min} Z{z_max} F{speed * 60}
		#SET_GCODE_VARIABLE MACRO=_vars_speed VARIABLE=i VALUE={ i }
		#_vars_speed
	{% endfor %}

	# Restore max speed/accel/accel_to_decel to their configured values
	SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

	# Re-home XY and get position again for comparison:
		G28
		# Go to XY home positions (in case your homing override leaves it elsewhere)
		G0 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y} Z{printer.toolhead.axis_minimum.z + 20} F{30 * 60}
		G4 P1000 
		GET_MCU_POSITION

	# Restore previous gcode state (absolute/relative, etc)
	RESTORE_GCODE_STATE NAME=TEST_SPEED