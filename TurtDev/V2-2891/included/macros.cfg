[gcode_macro PRINT_START]
gcode:
    {% set bedtemp = params.BED|default(60)|int %}
    {% set hotendtemp = params.HOTEND|default(210)|int %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% if params.MATERIAL == "ABS+" %}
        SET_FAN_SPEED FAN=nevermore_filter SPEED=1
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0.15
    {% elif params.BED > "71" %}
        SET_FAN_SPEED FAN=nevermore_filter SPEED=0.65
    {% else %}
        SET_FAN_SPEED FAN=nevermore_filter SPEED=0
    {% endif %}
    #Start GCode
    STATUS_READY
    lights_on
    M117 Homing..
    G90
    CG28
    M117 Heating..
    STATUS_HEATING
    M190 S{bedtemp}                   ;start heating bed and WAIT
    M104 S{hotendtemp}                ;start heating hotend to temp without WAIT
    TURT_MESH
    #M117 waiting for bed surface to heat up..
    ##if bed is at 112 then surface is 103
    #TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-10} MAXIMUM={bedtemp+5}
    STATUS_CLEANING
    CLEAN_NOZZLE
    STATUS_CALIBRATING_Z
    CALIBRATE_Z
    G1 Z12 F3000                      ; move nozzle away from bed
    M117 Waiting for Hotend...
    STATUS_HEATING
    M109 S{hotendtemp}                ;start heating hotend and WAIT
    STATUS_PRINTING


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=nevermore_filter SPEED=0.8
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.6
    UPDATE_DELAYED_GCODE ID=nevermore_stop_delayed DURATION=900
    UPDATE_DELAYED_GCODE ID=exhaust_stop_delayed DURATION=900
    TURN_OFF_HEATERS
    {% if unload|int == 1%}
        ERCF_EJECT
    {% endif %}
    # BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    lights_off
    M117 Cooldown Time...
    STATUS_OFF
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  BASE_CANCEL_PRINT
  STATUS_READY

[gcode_macro PURGE_LINE]
gcode:
    STATUS_BUSY
    M117 Purging in progress..
    G1 Y0 X20 Z2 F18000.0               ; Move above start position
    G92 E0                              ; Reset Extruder
    M83                                 ; set extruder to relative
    G1 Z2.3 F3000                       ; Move Z Axis up
    G1 Y0 X20 Z0.3 F18000.0             ; Move to start position
    G1 Y0 X120.0 Z0.3 F1500.0 E15       ; Draw the first line
    G1 Y0.5 X120.0 Z0.3 F18000.0        ; Move to side a little
    G1 Y0.5 X20 Z0.3 F1500.0 E20        ; Draw the second line
    G1 Y5 Z2.0 F3000                    ; Move Z Axis up
    G92 E0                              ; Reset Extruder
    M82                                 ; set extruder to absolute
    M117 Printing..
    STATUS_PRINTING

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = 5.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G92 E0
  G1 E-1.0 F1500.0
  G90
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  SET_NOZZLE_LEDS_OFF


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    SET_NOZZLE_LEDS_ON
    {% if printer["gcode_macro ERCF_PAUSE"].is_paused|int != 0 %}
        M118 You can't resume the print without unlocking the ERCF first.
        M118 Run ERCF_UNLOCK and solve any issue before hitting Resume again
    {% else %}
        RESTORE_GCODE_STATE NAME=PAUSE_state
        G90
        {% if printer["gcode_macro ERCF_VAR"].clog_detection|int == 1 %}
            SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
        {% endif %}
        BASE_RESUME
    {% endif %}

#####################################################################
#   Probing
#####################################################################

[gcode_macro G29]
gcode:
    G32
    BED_MESH_CALIBRATE

[gcode_macro M48] #current pos
gcode:
    PROBE_ACCURACY

[gcode_macro check_if_attached]
gcode:
    HomeMe
    _CheckProbe action=query

    {% if printer.probe.last_query == False %} #if attached
        {% if printer['gcode_macro _Probe_Variables'].probe_lock  == False %} #starts out as false
            #{ action_respond_info("send help probe is unlocked.") }
            DOCK_PROBE
        {%else%}
            DOCK_PROBE_UNLOCK
        {%endif%}
        { action_respond_info("send help dock probe first") }
    {% endif %}

[gcode_macro Center]
gcode:
    G0 x150 Y150 Z2 f9000

[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    G28
    {% endif %}
    STATUS_READY

  
[gcode_macro BED_MESH_HOT]
gcode:
    PREHEAT BED=110 EXTRUDER=230 WAIT=60
    BED_MESH_CLEAR
    STATUS_HOMING
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28
    STATUS_MESHING
    BED_MESH_CALIBRATE
    G28
    BED_MESH_PROFILE SAVE=Hot
    SAVE_CONFIG

[gcode_macro TURT_MESH]
gcode:
    CG28
    Attach_Probe_Lock
    M117 QGL Time
    STATUS_LEVELING
    G1 Z12 F3000                      ; move nozzle away from bed
    QUAD_GANTRY_LEVEL      ; tram the flying gantry
    G28 Z
    #BED_MESH_CLEAR
    M117 Bed Mesh Time
    STATUS_MESHING
    BED_MESH_CALIBRATE     ; create new bed mesh
    G1 Z12 F3000                      ; move nozzle away from bed
    Dock_Probe_Unlock           
    STATUS_READY

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y150 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state

[homing_override]
axes: z
set_position_z: 0
gcode:
  ##### get user defines #####
  # use -10 as default to insure it error in case the variable is not existing
  {% set z_endstop_x = printer['gcode_macro _USER_VARIABLE'].z_endstop_x|default(-10) %}
  {% set z_endstop_y = printer['gcode_macro _USER_VARIABLE'].z_endstop_y|default(-10) %}
  {% set z_hop = printer['gcode_macro _USER_VARIABLE'].z_hop %}
  ##### end of definitions #####
  SAVE_GCODE_STATE NAME=HOMING_state

  ## reduce current of Z motors
  _SET_ACC VAL=HOME
  _SET_CURRENT VAL=HOME
    
  G91                            ; relative positioning
  G0 Z10 F1500
  G90                            ; absolute positioning

  # Home X and Y only for G28 or G28 XYZ
  {% if 'Z' in params %}
    {% if "x" not in printer.toolhead.homed_axes %}
      G28 X
    {% endif %}
    {% if "y" not in printer.toolhead.homed_axes %}
      G28 Y
    {% endif %}
  {% else %}
    G28 X Y
  {% endif %} 

  ##	XY Location of the Z Endstop Switch
  G0 X{z_endstop_x} Y{z_endstop_y} F12000
  G28 Z                          ; home Z
  G91                            ; relative positioning
  G0 Z2 F1500                    ; move up

  ## return to org current settings
  {% if params.RESET_SETTINGS|default('true') == 'true' %}
    DETACH_PROBE
    _SET_CURRENT
    _SET_ACC
  {% endif %}

  # Lift Z
  G90                            ; absolute positioning
  G0 Z{z_hop} F1800

  RESTORE_GCODE_STATE NAME=HOMING_state

#####################################################################
#   Misc
#####################################################################

[delayed_gcode nevermore_stop_delayed]
gcode:
  SET_FAN_SPEED FAN=nevermore_filter SPEED=0

[delayed_gcode exhaust_stop_delayed]
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0

# pull plastic in
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E15 F300                    ; quickly load filament to heatbreak
   G1 E25 F150                    ; slower extrusion for hotend path
   M82                            ; set extruder to absolute

# spit plastic back out
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E1 F300                     ; extrude a little to soften tip
   G1 E-120 F1200                 ; retract filament completely
   M82 

[gcode_macro TENSION_BELTS]
gcode:
    G1 X10 Y10 F6000 ; front left corner
    G1 X10 Y250 F6000 ; back left corner
    G1 X250 Y250 F6000 ; back right corner
    G1 X250 Y10 F6000 ; front right corner

[gcode_macro M600]
gcode:
  PAUSE

[gcode_macro update_display]
gcode:
   {% if printer['temperature_sensor enclosure_temp'] != null %}
      M117 Chamber Temp: {printer['temperature_sensor enclosure_temp'].temperature}
   {% else %}
      { action_respond_info("No 'chamber' sensor found") }
   {% endif %}

[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

#####################################################################
#   Temp
#####################################################################

[gcode_macro PREHEAT]
gcode:
    ;""" Idea. Warm nozzle to a point below drooling, because nozzles heat fast
    ; Warm bed to precise because bed heats slow
    ; G28, QGL, park nozzle in middle of bed (to warm chamber evenly)
    ; part fan on 30% to blow some of the nozzle heat into the chamber and warm up faster
    ; """
    {% if 'PLA' in params %}    ; = PLA =
      M104 S190                 ; nozzle to 190C
      M140 S60                  ; bed to 60C
    {% elif 'PETG' in params %} ; = PETG =
      M104 S190                 ; nozzle to 190C
      M140 S80                  ; bed to 80C
    {% else %}                  ; = ABS =
      M104 S210                 ; nozzle to 210C
      M140 S100                 ; bed to 100C
    {% endif %}
    G32                         ; Home All and QGL
    M106 S77                    ; Part fan to 30%
    G0 X125 Y125 Z30 F7200      ; Move to centre of bed

############################
## Frame LED from HE2 24V ##
############################

# Chamber Lighting
[output_pin caselight]
pin: PB10
#max_power: 1.0
#kick_start_time: 0.5
pwm: true
shutdown_value: 0
value: 50
cycle_time: 0.01
scale: 100
 
# Lighting Control
[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0
 
[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=50
 
[gcode_macro lights_toggle]
gcode:
    {% if printer["output_pin caselight"].value == 50 %}
        lights_off
    {% else %}
        lights_on
    {% endif %}