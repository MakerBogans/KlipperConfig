[gcode_macro PRINT_START]
gcode:
    {% set bedtemp = params.BED|default(60)|int %}
    {% set hotendtemp = params.HOTEND|default(210)|int %}
    {% set z_adjust = params.Z_ADJUST|default(0.0)|float %}
    {% if bedtemp > "70"|int %}
        SET_FAN_SPEED FAN=nevermore_filter SPEED=1
        SET_FAN_SPEED FAN=exhaust_fan SPEED=0.10
    {% elif bedtemp < "70"|int %}
        SET_FAN_SPEED FAN=nevermore_filter SPEED=0
    {% endif %}

    #Start GCode
    STATUS_READY
    lights_on
    M117 Homing..
    G90
    CG28
    M117 Heating..
    STATUS_HEATING
    M190 S{bedtemp}                   ;start heating bed and WAIT
    M104 S120                ;start heating hotend to temp without WAIT
    TURT_MESH
    #M117 waiting for bed surface to heat up..
    ##if bed is at 112 then surface is 103
    #TEMPERATURE_WAIT SENSOR='temperature_sensor Bed_Surface' MINIMUM={bedtemp-10} MAXIMUM={bedtemp+5}
    #STATUS_CLEANING
    #CLEAN_NOZZLE
    STATUS_CALIBRATING_Z
    G28 Z
    G1 Z12 F3000                      ; move nozzle away from bed
    M117 Waiting for Hotend...
    STATUS_HEATING
    M109 S{hotendtemp}                ;start heating hotend and WAIT
    STATUS_CLEANING
    VORON_PURGE
    STATUS_PRINTING


[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    STATUS_COOLING
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    {% set unload = params.UNLOAD_AT_END|default(0)|int %}
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-2.0 F3600                 ; retract filament
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    SET_FAN_SPEED FAN=nevermore_filter SPEED=0.8
    SET_FAN_SPEED FAN=exhaust_fan SPEED=0.6
    UPDATE_DELAYED_GCODE ID=nevermore_stop_delayed DURATION=900
    UPDATE_DELAYED_GCODE ID=exhaust_stop_delayed DURATION=900
    TURN_OFF_HEATERS
    # BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    lights_off
    M117 Cooldown Time...
    UPDATE_DELAYED_GCODE ID=part_ready_delayed DURATION=900
    
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  STATUS_BUSY
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 20.0) %}
      {% set z_safe = 20.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  BASE_CANCEL_PRINT
  STATUS_READY

[gcode_macro PURGE_LINE]
gcode:
    STATUS_BUSY
    M117 Purging in progress..
    G1 Y0 X20 Z2 F18000.0               ; Move above start position
    G92 E0                              ; Reset Extruder
    M83                                 ; set extruder to relative
    G1 Z2.3 F3000                       ; Move Z Axis up
    G1 Y0 X20 Z0.3 F18000.0             ; Move to start position
    G1 Y0 X120.0 Z0.3 F1500.0 E15       ; Draw the first line
    G1 Y0.5 X120.0 Z0.3 F18000.0        ; Move to side a little
    G1 Y0.5 X20 Z0.3 F1500.0 E20        ; Draw the second line
    G1 Y5 Z2.0 F3000                    ; Move Z Axis up
    G92 E0                              ; Reset Extruder
    M82                                 ; set extruder to absolute
    M117 Printing..
    STATUS_PRINTING

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set x_park = printer.toolhead.axis_minimum.x|float + 5.0 %}
  {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
  {% set max_z = printer.toolhead.axis_maximum.z|float %}
  {% set act_z = printer.toolhead.position.z|float %}
  {% if act_z < (max_z - 5.0) %}
      {% set z_safe = 5.0 %}
  {% else %}
      {% set z_safe = max_z - act_z %}
  {% endif %}
  G92 E0
  G1 E-1.0 F1500.0
  G90
  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  G91
  G1 Z{z_safe} F900
  G90
  G0 X{x_park} Y{y_park} F6000
  SET_NOZZLE_LEDS_OFF


[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    STATUS_READY
    BASE_RESUME


#####################################################################
#   Probing
#####################################################################


[gcode_macro G29]
gcode:
    G32
    BED_MESH_CALIBRATE

[gcode_macro M48] #current pos
gcode:
    PROBE_ACCURACY

[gcode_macro Center]
gcode:
    G0 x150 Y150 Z25 f9000

[gcode_macro _CG28]
gcode:
  {% if "xyz" not in printer.toolhead.homed_axes %}
    G28 RESET_SETTINGS={ params.RESET_SETTINGS|default('true') }
  {% endif %}

# Conditional G28 (home if not already homed)
[gcode_macro CG28]
gcode:
    {% if "x" not in printer.toolhead.homed_axes or "y" not in printer.toolhead.homed_axes or "z" not in printer.toolhead.homed_axes %}
    STATUS_HOMING
    G28
    {% endif %}
    STATUS_READY

  
[gcode_macro BED_MESH_HOT]
gcode:
    PREHEAT BED=110 EXTRUDER=230 WAIT=60
    BED_MESH_CLEAR
    STATUS_HOMING
    G28
    STATUS_LEVELING
    QUAD_GANTRY_LEVEL
    G28
    STATUS_MESHING
    BED_MESH_CALIBRATE
    G28
    BED_MESH_PROFILE SAVE=Hot
    SAVE_CONFIG

[gcode_macro TURT_MESH]
gcode:
    STATUS_HOMING
    CG28
    STATUS_CLEANING
    CLEAN_NOZZLE
    M117 QGL Time
    STATUS_LEVELING
    G1 Z12 F3000                      ; move nozzle away from bed
    QUAD_GANTRY_LEVEL      ; tram the flying gantry
    G28 Z
    #BED_MESH_CLEAR
    M117 Bed Mesh Time
    STATUS_MESHING
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=True
    BED_MESH_CALIBRATE     ; create new bed mesh
    SET_GCODE_VARIABLE MACRO=_KNOMI_STATUS VARIABLE=probing VALUE=False
    G1 Z12 F3000                      ; move nozzle away from bed          
    STATUS_READY

[gcode_macro PARKCENTER]
gcode:
    {% set Z = params.Z|default(30)|float %}
    SAVE_GCODE_STATE NAME=PARKCENTER_state
    _CG28                          ; Home if not already homed
    G90                            ; absolute positioning
    G0 X150 Y150 Z{Z} F12000       ; move to center
    RESTORE_GCODE_STATE NAME=PARKCENTER_state



#####################################################################
#   Misc
#####################################################################

[delayed_gcode nevermore_stop_delayed]
gcode:
  SET_FAN_SPEED FAN=nevermore_filter SPEED=0

[delayed_gcode exhaust_stop_delayed]
gcode:
  SET_FAN_SPEED FAN=exhaust_fan SPEED=0

[delayed_gcode part_ready_delayed]
gcode:
  set_nozzle_leds_off 

# pull plastic in
[gcode_macro LOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E15 F300                    ; quickly load filament to heatbreak
   G1 E25 F150                    ; slower extrusion for hotend path
   M82                            ; set extruder to absolute

# spit plastic back out
[gcode_macro UNLOAD_FILAMENT]
gcode:
   M83                            ; set extruder to relative
   G1 E1 F300                     ; extrude a little to soften tip
   G1 E-120 F1200                 ; retract filament completely
   M82 

[gcode_macro TENSION_BELTS]
gcode:
    G1 X10 Y10 F6000 ; front left corner
    G1 X10 Y250 F6000 ; back left corner
    G1 X250 Y250 F6000 ; back right corner
    G1 X250 Y10 F6000 ; front right corner

[gcode_macro M600]
gcode:
  PAUSE

[gcode_macro update_display]
gcode:
   {% if printer['temperature_sensor enclosure_temp'] != null %}
      M117 Chamber Temp: {printer['temperature_sensor enclosure_temp'].temperature}
   {% else %}
      { action_respond_info("No 'chamber' sensor found") }
   {% endif %}

[gcode_macro M900]
gcode:
	# Parameters
	{% set pa = params.K|float %}
	
	SET_PRESSURE_ADVANCE ADVANCE={pa}

#####################################################################
#   Temp
#####################################################################

[gcode_macro PREHEAT]
gcode:
    ;""" Idea. Warm nozzle to a point below drooling, because nozzles heat fast
    ; Warm bed to precise because bed heats slow
    ; G28, QGL, park nozzle in middle of bed (to warm chamber evenly)
    ; part fan on 30% to blow some of the nozzle heat into the chamber and warm up faster
    ; """
    {% if 'PLA' in params %}    ; = PLA =
      M104 S190                 ; nozzle to 190C
      M140 S60                  ; bed to 60C
    {% elif 'PETG' in params %} ; = PETG =
      M104 S190                 ; nozzle to 190C
      M140 S80                  ; bed to 80C
    {% else %}                  ; = ABS =
      M104 S210                 ; nozzle to 210C
      M140 S100                 ; bed to 100C
    {% endif %}
    G32                         ; Home All and QGL
    M106 S77                    ; Part fan to 30%
    G0 X125 Y125 Z30 F7200      ; Move to centre of bed

############################
## Frame LED from HE2 24V ##
############################

# Chamber Lighting
[output_pin caselight]
pin: PB10
#max_power: 1.0
#kick_start_time: 0.5
pwm: true
shutdown_value: 0
value: 50
cycle_time: 0.01
scale: 100
 
# Lighting Control
[gcode_macro lights_off]
gcode:
    SET_PIN PIN=caselight VALUE=0
 
[gcode_macro lights_on]
gcode:
    SET_PIN PIN=caselight VALUE=50
 
[gcode_macro lights_toggle]
gcode:
    {% if printer["output_pin caselight"].value == 50 %}
        lights_off
    {% else %}
        lights_on
    {% endif %}

############################
## Voron Purge & Line Purge ##
############################

[gcode_macro VORON_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set kamp_settings = printer["gcode_macro _KAMP_Settings"] %}
    {% set verbose_enable = kamp_settings.verbose_enable | abs %}
    {% set purge_height = kamp_settings.purge_height | float %}
    {% set tip_distance = kamp_settings.tip_distance | float %}
    {% set purge_margin = kamp_settings.purge_margin | float %}
    {% set purge_amount = kamp_settings.purge_amount | float %}
    {% set flow_rate = kamp_settings.flow_rate | float %}
    {% set size = 10 | float %}

    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

            SAVE_GCODE_STATE NAME=Prepurge_State                                                            # Create gcode state

            G92 E0                                                                                          # Reset extruder
            G0 F{travel_speed}                                                                              # Set travel speed
            G90                                                                                             # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_origin+size/2}                                                   # Move to purge position
            G0 Z{purge_height}                                                                              # Move to purge Z height
            M83                                                                                             # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                                          # Move tip of filament to nozzle
            G1 X{purge_x_origin+size*0.289} Y{purge_y_origin+size} E{purge_amount/4} F{purge_move_speed}    # Purge first line of logo
            {RETRACT}                                                                                       # Retract
            G0 Z{purge_height*2}                                                                            # Z hop
            G0 X{purge_x_origin+size*0.789} Y{purge_y_origin+size}                                          # Move to second purge line origin
            G0 Z{purge_height}                                                                              # Move to purge Z height
            {UNRETRACT}                                                                                     # Recover
            G1 X{purge_x_origin+size*0.211} Y{purge_y_origin} E{purge_amount/2} F{purge_move_speed}         # Purge second line of logo
            {RETRACT}                                                                                       # Retract
            G0 Z{purge_height*2}                                                                            # Z hop
            G0 X{purge_x_origin+size*0.711} Y{purge_y_origin}                                               # Move to third purge line origin
            G0 Z{purge_height}                                                                              # Move to purge Z height
            {UNRETRACT}                                                                                     # Recover
            G1 X{purge_x_origin+size} Y{purge_y_origin+size/2}  E{purge_amount/4} F{purge_move_speed}       # Purge third line of logo
            {RETRACT}                                                                                       # Retract
            G92 E0                                                                                          # Reset extruder distance
            M82                                                                                             # Absolute extrusion mode
            G0 Z{purge_height*2} F{travel_speed}                                                            # Z hop

            RESTORE_GCODE_STATE NAME=Prepurge_State                                                         # Restore gcode state

    {% endif %}

########################
#Line Purge
########################

[gcode_macro LINE_PURGE]
description: A purge macro that adapts to be near your actual printed objects
gcode:
    # Get relevant printer params
    {% set travel_speed = (printer.toolhead.max_velocity) * 60 | float %}
    {% set cross_section = printer.configfile.settings.extruder.max_extrude_cross_section | float %}
    
    # Use firmware retraction if it is defined
    {% if printer.firmware_retraction is defined %}
        {% set RETRACT = G10 | string %}
        {% set UNRETRACT = G11 | string %}
    {% else %}
        {% set RETRACT = 'G1 E-.5 F2100' | string %}
        {% set UNRETRACT = 'G1 E.5 F2100' | string %}
    {% endif %}

    # Get purge settings from _Kamp_Settings
    {% set verbose_enable = printer["gcode_macro _KAMP_Settings"].verbose_enable | abs %}
    {% set purge_height = printer["gcode_macro _KAMP_Settings"].purge_height | float %}
    {% set tip_distance = printer["gcode_macro _KAMP_Settings"].tip_distance | float %}
    {% set purge_margin = printer["gcode_macro _KAMP_Settings"].purge_margin | float %}
    {% set purge_amount = printer["gcode_macro _KAMP_Settings"].purge_amount | float %}
    {% set flow_rate = printer["gcode_macro _KAMP_Settings"].flow_rate | float %}


    # Calculate purge origins and centers from objects
    {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}    # Get all object points
    {% set purge_x_min = (all_points | map(attribute=0) | min | default(0)) %}                          # Object x min
    {% set purge_x_max = (all_points | map(attribute=0) | max | default(0)) %}                          # Object x max
    {% set purge_y_min = (all_points | map(attribute=1) | min | default(0)) %}                          # Object y min
    {% set purge_y_max = (all_points | map(attribute=1) | max | default(0)) %}                          # Object y max

    {% set purge_x_center = ([((purge_x_max + purge_x_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on X axis
    {% set purge_y_center = ([((purge_y_max + purge_y_min) / 2) - (purge_amount / 2), 0] | max) %}      # Create center point of purge line relative to print on Y axis

    {% set purge_x_origin = ([purge_x_min - purge_margin, 0] | max) %}                                  # Add margin to x min, compare to 0, and choose the larger
    {% set purge_y_origin = ([purge_y_min - purge_margin, 0] | max) %}                                  # Add margin to y min, compare to 0, and choose the larger

    # Calculate purge speed
    {% set purge_move_speed = (flow_rate / 5.0) * 60 | float %}

    {% if cross_section < 5 %}

        {action_respond_info("[Extruder] max_extrude_cross_section is insufficient for purge, please set it to 5 or greater. Purge skipped.")}

    {% else %}

        {% if verbose_enable == True %}

        {action_respond_info("Moving filament tip {}mms".format(                                                                 
            (tip_distance),                                                                                      
        )) }
        {% endif %}

        {% if printer.firmware_retraction is defined %}
            {action_respond_info("KAMP purge is using firmware retraction.")}
        {% else %}
            {action_respond_info("KAMP purge is not using firmware retraction, it is recommended to configure it.")}
        {% endif %}

        {% if purge_y_origin > 0 %}
        
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(                                                                 
                (purge_x_center),
                (purge_y_origin),
                (purge_amount),
                (flow_rate),
            )) }
    
        {% else %}
    
            {action_respond_info("KAMP purge starting at {}, {} and purging {}mm of filament, requested flow rate is {}mm/s3.".format(                                                                 
                (purge_x_origin),
                (purge_y_center),
                (purge_amount),
                (flow_rate),
            )) }

        {% endif %}

        SAVE_GCODE_STATE NAME=Prepurge_State                                                    # Create gcode state

        {% if purge_y_origin > 0 %}                                                             # If there's room on Y, purge along X axis in front of print area

            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_center} Y{purge_y_origin}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 X{purge_x_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 X{purge_x_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% else %}                                                                              # If there's room on X, purge along Y axis to the left of print area
            
            G92 E0                                                                              # Reset extruder
            G0 F{travel_speed}                                                                  # Set travel speed
            G90                                                                                 # Absolute positioning
            G0 X{purge_x_origin} Y{purge_y_center}                                              # Move to purge position
            G0 Z{purge_height}                                                                  # Move to purge Z height
            M83                                                                                 # Relative extrusion mode
            G1 E{tip_distance} F{purge_move_speed}                                              # Move filament tip
            G1 Y{purge_y_center + purge_amount} E{purge_amount} F{purge_move_speed}             # Purge line
            {RETRACT}                                                                           # Retract
            G0 Y{purge_y_center + purge_amount + 10} F{travel_speed}                            # Rapid move to break string
            G92 E0                                                                              # Reset extruder distance
            M82                                                                                 # Absolute extrusion mode
            G0 Z{purge_height * 2} F{travel_speed}                                              # Z hop

        {% endif %}

        RESTORE_GCODE_STATE NAME=Prepurge_State                                                 # Restore gcode state
    
    {% endif %}
